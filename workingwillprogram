import tkinter as tk
from tkinter import messagebox, filedialog
import json
import os
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter

# File paths
PROFILES_FILE = os.path.expanduser('~/profiles.json')

def save_to_json(data, file_path):
    try:
        with open(file_path, 'w') as f:
            json.dump(data, f, indent=4)
    except IOError as e:
        messagebox.showerror("Error", f"Unable to save data: {e}")

def load_from_json(file_path):
    data = []
    try:
        with open(file_path, 'r') as f:
            data = json.load(f)
    except FileNotFoundError:
        messagebox.showwarning("File Not Found", f"File {file_path} not found.")
    except IOError as e:
        messagebox.showerror("Error", f"Unable to load data: {e}")
    return data

def create_profile_window(root):
    def create_profile():
        # Collect answers from entry fields
        first_name = first_name_entry.get()
        last_name = last_name_entry.get()
        birthday = birthday_entry.get()
        bio_info = bio_info_entry.get("1.0", "end-1c")  # Retrieve text from a Text widget
        employment_info = employment_info_entry.get("1.0", "end-1c")
        banking_info = banking_info_entry.get("1.0", "end-1c")
        documents_info = documents_info_entry.get("1.0", "end-1c")

        # Validate if required fields are not empty
        if first_name.strip() == "" or last_name.strip() == "":
            messagebox.showwarning("Warning", "First Name and Last Name cannot be empty!")
            return

        # Create profile dictionary
        profile_data = {
            'name': f"{first_name} {last_name}",
            'first_name': first_name,
            'last_name': last_name,
            'birthday': birthday,
            'bio_info': bio_info,
            'employment_info': employment_info,
            'banking_info': banking_info,
            'documents_info': documents_info,
            'contacts': []  # Ensure 'contacts' key is initialized
        }

        # Append new profile to profiles list
        profiles.append(profile_data)

        # Save profiles to JSON file
        save_to_json(profiles, PROFILES_FILE)

        # Display success message
        messagebox.showinfo("Success", f"Profile '{first_name} {last_name}' created successfully!")

        # Update profiles listbox with new profile
        profiles_listbox.insert(tk.END, f"{first_name} {last_name}")

    # Create the profile creation window
    profile_window = tk.Toplevel(root)
    profile_window.title("Create Profile")

    # First Name
    tk.Label(profile_window, text="First Name:").pack(pady=5)
    first_name_entry = tk.Entry(profile_window)
    first_name_entry.pack(pady=5)

    # Last Name
    tk.Label(profile_window, text="Last Name:").pack(pady=5)
    last_name_entry = tk.Entry(profile_window)
    last_name_entry.pack(pady=5)

    # Birthday
    tk.Label(profile_window, text="Birthday:").pack(pady=5)
    birthday_entry = tk.Entry(profile_window)
    birthday_entry.pack(pady=5)

    # Bio Info
    tk.Label(profile_window, text="Bio Info:").pack(pady=5)
    bio_info_entry = tk.Text(profile_window, height=5, width=50)
    bio_info_entry.pack(pady=5)

    # Employment Info
    tk.Label(profile_window, text="Employment Info:").pack(pady=5)
    employment_info_entry = tk.Text(profile_window, height=5, width=50)
    employment_info_entry.pack(pady=5)

    # Banking Info
    tk.Label(profile_window, text="Banking Info:").pack(pady=5)
    banking_info_entry = tk.Text(profile_window, height=5, width=50)
    banking_info_entry.pack(pady=5)

    # Documents Info
    tk.Label(profile_window, text="Documents Info:").pack(pady=5)
    documents_info_entry = tk.Text(profile_window, height=5, width=50)
    documents_info_entry.pack(pady=5)

    # Create Profile Button
    tk.Button(profile_window, text="Create Profile", command=create_profile).pack(pady=20)

def create_profile_window(root):
    def create_profile():
        # Collect answers from entry fields
        first_name = first_name_entry.get()
        last_name = last_name_entry.get()
        birthday = birthday_entry.get()
        bio_info = bio_info_entry.get("1.0", "end-1c")  # Retrieve text from a Text widget
        employment_info = employment_info_entry.get("1.0", "end-1c")
        banking_info = banking_info_entry.get("1.0", "end-1c")
        documents_info = documents_info_entry.get("1.0", "end-1c")

        # Validate if required fields are not empty
        if first_name.strip() == "" or last_name.strip() == "":
            messagebox.showwarning("Warning", "First Name and Last Name cannot be empty!")
            return

        # Create profile dictionary
        profile_data = {
            'name': f"{first_name} {last_name}",
            'first_name': first_name,
            'last_name': last_name,
            'birthday': birthday,
            'bio_info': bio_info,
            'employment_info': employment_info,
            'banking_info': banking_info,
            'documents_info': documents_info,
            'contacts': []  # Ensure 'contacts' key is initialized
        }

        # Append new profile to profiles list
        profiles.append(profile_data)

        # Save profiles to JSON file
        save_to_json(profiles, PROFILES_FILE)

        # Display success message
        messagebox.showinfo("Success", f"Profile '{first_name} {last_name}' created successfully!")

        # Update profiles listbox with new profile
        profiles_listbox.insert(tk.END, f"{first_name} {last_name}")

    # Create the profile creation window
    profile_window = tk.Toplevel(root)
    profile_window.title("Create Profile")

    # First Name
    tk.Label(profile_window, text="First Name:").pack(pady=5)
    first_name_entry = tk.Entry(profile_window)
    first_name_entry.pack(pady=5)

    # Last Name
    tk.Label(profile_window, text="Last Name:").pack(pady=5)
    last_name_entry = tk.Entry(profile_window)
    last_name_entry.pack(pady=5)

    # Birthday
    tk.Label(profile_window, text="Birthday:").pack(pady=5)
    birthday_entry = tk.Entry(profile_window)
    birthday_entry.pack(pady=5)

    # Bio Info
    tk.Label(profile_window, text="Bio Info:").pack(pady=5)
    bio_info_entry = tk.Text(profile_window, height=5, width=50)
    bio_info_entry.pack(pady=5)

    # Employment Info
    tk.Label(profile_window, text="Employment Info:").pack(pady=5)
    employment_info_entry = tk.Text(profile_window, height=5, width=50)
    employment_info_entry.pack(pady=5)

    # Banking Info
    tk.Label(profile_window, text="Banking Info:").pack(pady=5)
    banking_info_entry = tk.Text(profile_window, height=5, width=50)
    banking_info_entry.pack(pady=5)

    # Documents Info
    tk.Label(profile_window, text="Documents Info:").pack(pady=5)
    documents_info_entry = tk.Text(profile_window, height=5, width=50)
    documents_info_entry.pack(pady=5)

    # Create Profile Button
    tk.Button(profile_window, text="Create Profile", command=create_profile).pack(pady=20)

def print_profiles():
    profiles_listbox.delete(0, tk.END)
    for profile in profiles:
        if isinstance(profile, dict) and 'name' in profile:
            profiles_listbox.insert(tk.END, profile['name'])
        else:
            print("Invalid profile format:", profile)

def delete_profile_window():
    selected_index = profiles_listbox.curselection()
    if selected_index:
        selected_profile_name = profiles_listbox.get(selected_index[0])
        result = messagebox.askyesno("Delete Profile", f"Are you sure you want to delete '{selected_profile_name}'?")
        if result:
            profiles_listbox.delete(selected_index)
            # Remove the profile from the profiles list
            for profile in profiles:
                if isinstance(profile, dict) and profile.get('name') == selected_profile_name:
                    profiles.remove(profile)
                    break
            # Save the updated profiles list to JSON file
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", f"Profile '{selected_profile_name}' deleted successfully.")
    else:
        messagebox.showwarning("No Profile Selected", "Please select a profile to delete.")

def open_contact_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    contacts_window = tk.Toplevel()
    contacts_window.title(f"Contacts for Profile: {profile_name}")

    contact_list = tk.Listbox(contacts_window, width=50, height=20)
    contact_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(contacts_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    contact_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=contact_list.yview)

    def print_contacts():
        contact_list.delete(0, tk.END)
        for contact in profile.get('contacts', []):
            contact_info = f"Name: {contact['name']}, Email: {contact.get('email', '')}, Phone: {contact.get('phone', '')}"
            contact_list.insert(tk.END, contact_info)

    def add_contact():
        add_contact_window = tk.Toplevel()
        add_contact_window.title("Add Contact")

        tk.Label(add_contact_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_contact_window)
        name_entry.pack()

        tk.Label(add_contact_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_contact_window)
        email_entry.pack()

        tk.Label(add_contact_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_contact_window)
        phone_entry.pack()

        def save_contact():
            if 'contacts' not in profile:
                profile['contacts'] = []  # Initialize 'contacts' list if it doesn't exist
            contact = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['contacts'].append(contact)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "Contact added successfully!")
            print_contacts()  # Update the contacts listbox after adding a new contact
            add_contact_window.destroy()

        tk.Button(add_contact_window, text="Save Contact", command=save_contact).pack(pady=20)


    def edit_contact():
        selected_index = contact_list.curselection()
        if selected_index:
            selected_contact = profile['contacts'][selected_index[0]]
            edit_contact_window = tk.Toplevel()
            edit_contact_window.title("Edit Contact")

            tk.Label(edit_contact_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_contact_window)
            name_entry_edit.insert(0, selected_contact['name'])
            name_entry_edit.pack()

            tk.Label(edit_contact_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_contact_window)
            email_entry_edit.insert(0, selected_contact.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_contact_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_contact_window)
            phone_entry_edit.insert(0, selected_contact.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_contact['name'] = name_entry_edit.get()
                selected_contact['email'] = email_entry_edit.get()
                selected_contact['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "Contact updated successfully!")
                print_contacts()  # Update the contacts listbox after editing a contact
                edit_contact_window.destroy()

            tk.Button(edit_contact_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No Contact Selected", "Please select a contact to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'contacts':
                    continue  # Skip printing contacts here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print contacts information
            c.drawString(100, y_position, "Contacts:")
            y_position -= 20
            for contact in profile.get('contacts', []):
                contact_info = f"Name: {contact['name']}, Email: {contact.get('email', '')}, Phone: {contact.get('phone', '')}"
                c.drawString(100, y_position, contact_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(contacts_window, text="Add Contact", command=add_contact).pack(pady=5)
    tk.Button(contacts_window, text="Edit Contact", command=edit_contact).pack(pady=5)
    tk.Button(contacts_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_contacts()


def open_banking_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    banking_window = tk.Toplevel()
    banking_window.title(f"banking for Profile: {profile_name}")

    banking_list = tk.Listbox(banking_window, width=50, height=20)
    banking_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(banking_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    banking_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=banking_list.yview)

    def print_banking():
        banking_list.delete(0, tk.END)
        for banking in profile.get('banking', []):
            banking_info = f"Name: {banking['name']}, Email: {banking.get('email', '')}, Phone: {banking.get('phone', '')}"
            banking_list.insert(tk.END, banking_info)

    def add_banking():
        add_banking_window = tk.Toplevel()
        add_banking_window.title("Add banking")

        tk.Label(add_banking_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_banking_window)
        name_entry.pack()

        tk.Label(add_banking_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_banking_window)
        email_entry.pack()

        tk.Label(add_banking_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_banking_window)
        phone_entry.pack()

        def save_banking():
            if 'banking' not in profile:
                profile['banking'] = []  # Initialize 'banking' list if it doesn't exist
            banking = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['banking'].append(banking)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "banking added successfully!")
            print_banking()  # Update the banking listbox after adding a new banking
            add_banking_window.destroy()

        tk.Button(add_banking_window, text="Save banking", command=save_banking).pack(pady=20)


    def edit_banking():
        selected_index = banking_list.curselection()
        if selected_index:
            selected_banking = profile['banking'][selected_index[0]]
            edit_banking_window = tk.Toplevel()
            edit_banking_window.title("Edit banking")

            tk.Label(edit_banking_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_banking_window)
            name_entry_edit.insert(0, selected_banking['name'])
            name_entry_edit.pack()

            tk.Label(edit_banking_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_banking_window)
            email_entry_edit.insert(0, selected_banking.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_banking_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_banking_window)
            phone_entry_edit.insert(0, selected_banking.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_banking['name'] = name_entry_edit.get()
                selected_banking['email'] = email_entry_edit.get()
                selected_banking['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "banking updated successfully!")
                print_banking()  # Update the banking listbox after editing a banking
                edit_banking_window.destroy()

            tk.Button(edit_banking_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No banking Selected", "Please select a banking to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'banking':
                    continue  # Skip printing banking here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print banking information
            c.drawString(100, y_position, "banking:")
            y_position -= 20
            for banking in profile.get('banking', []):
                banking_info = f"Name: {banking['name']}, Email: {banking.get('email', '')}, Phone: {banking.get('phone', '')}"
                c.drawString(100, y_position, banking_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(banking_window, text="Add banking", command=add_banking).pack(pady=5)
    tk.Button(banking_window, text="Edit banking", command=edit_banking).pack(pady=5)
    tk.Button(banking_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_banking()
    

def open_housing_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    housing_window = tk.Toplevel()
    housing_window.title(f"housing for Profile: {profile_name}")

    housing_list = tk.Listbox(housing_window, width=50, height=20)
    housing_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(housing_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    housing_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=housing_list.yview)

    def print_housing():
        housing_list.delete(0, tk.END)
        for housing in profile.get('housing', []):
            housing_info = f"Name: {housing['name']}, Email: {housing.get('email', '')}, Phone: {housing.get('phone', '')}"
            housing_list.insert(tk.END, housing_info)

    def add_housing():
        add_housing_window = tk.Toplevel()
        add_housing_window.title("Add housing")

        tk.Label(add_housing_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_housing_window)
        name_entry.pack()

        tk.Label(add_housing_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_housing_window)
        email_entry.pack()

        tk.Label(add_housing_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_housing_window)
        phone_entry.pack()

        def save_housing():
            if 'housing' not in profile:
                profile['housing'] = []  # Initialize 'housing' list if it doesn't exist
            housing = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['housing'].append(housing)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "housing added successfully!")
            print_housing()  # Update the housing listbox after adding a new housing
            add_housing_window.destroy()

        tk.Button(add_housing_window, text="Save housing", command=save_housing).pack(pady=20)


    def edit_housing():
        selected_index = housing_list.curselection()
        if selected_index:
            selected_housing = profile['housing'][selected_index[0]]
            edit_housing_window = tk.Toplevel()
            edit_housing_window.title("Edit housing")

            tk.Label(edit_housing_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_housing_window)
            name_entry_edit.insert(0, selected_housing['name'])
            name_entry_edit.pack()

            tk.Label(edit_housing_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_housing_window)
            email_entry_edit.insert(0, selected_housing.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_housing_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_housing_window)
            phone_entry_edit.insert(0, selected_housing.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_housing['name'] = name_entry_edit.get()
                selected_housing['email'] = email_entry_edit.get()
                selected_housing['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "housing updated successfully!")
                print_housing()  # Update the housing listbox after editing a housing
                edit_housing_window.destroy()

            tk.Button(edit_housing_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No housing Selected", "Please select a housing to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'housing':
                    continue  # Skip printing housing here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print housing information
            c.drawString(100, y_position, "housing:")
            y_position -= 20
            for housing in profile.get('housing', []):
                housing_info = f"Name: {housing['name']}, Email: {housing.get('email', '')}, Phone: {housing.get('phone', '')}"
                c.drawString(100, y_position, housing_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(housing_window, text="Add housing", command=add_housing).pack(pady=5)
    tk.Button(housing_window, text="Edit housing", command=edit_housing).pack(pady=5)
    tk.Button(housing_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_housing()

def open_others_who_depend_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    others_who_depend_window = tk.Toplevel()
    others_who_depend_window.title(f"others_who_depend for Profile: {profile_name}")

    others_who_depend_list = tk.Listbox(others_who_depend_window, width=50, height=20)
    others_who_depend_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(others_who_depend_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    others_who_depend_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=others_who_depend_list.yview)

    def print_others_who_depend():
        others_who_depend_list.delete(0, tk.END)
        for others_who_depend in profile.get('others_who_depend', []):
            others_who_depend_info = f"Name: {others_who_depend['name']}, Email: {others_who_depend.get('email', '')}, Phone: {others_who_depend.get('phone', '')}"
            others_who_depend_list.insert(tk.END, others_who_depend_info)

    def add_others_who_depend():
        add_others_who_depend_window = tk.Toplevel()
        add_others_who_depend_window.title("Add others_who_depend")

        tk.Label(add_others_who_depend_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_others_who_depend_window)
        name_entry.pack()

        tk.Label(add_others_who_depend_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_others_who_depend_window)
        email_entry.pack()

        tk.Label(add_others_who_depend_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_others_who_depend_window)
        phone_entry.pack()

        def save_others_who_depend():
            if 'others_who_depend' not in profile:
                profile['others_who_depend'] = []  # Initialize 'others_who_depend' list if it doesn't exist
            others_who_depend = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['others_who_depend'].append(others_who_depend)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "others_who_depend added successfully!")
            print_others_who_depend()  # Update the others_who_depend listbox after adding a new others_who_depend
            add_others_who_depend_window.destroy()

        tk.Button(add_others_who_depend_window, text="Save others_who_depend", command=save_others_who_depend).pack(pady=20)


    def edit_others_who_depend():
        selected_index = others_who_depend_list.curselection()
        if selected_index:
            selected_others_who_depend = profile['others_who_depend'][selected_index[0]]
            edit_others_who_depend_window = tk.Toplevel()
            edit_others_who_depend_window.title("Edit others_who_depend")

            tk.Label(edit_others_who_depend_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_others_who_depend_window)
            name_entry_edit.insert(0, selected_others_who_depend['name'])
            name_entry_edit.pack()

            tk.Label(edit_others_who_depend_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_others_who_depend_window)
            email_entry_edit.insert(0, selected_others_who_depend.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_others_who_depend_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_others_who_depend_window)
            phone_entry_edit.insert(0, selected_others_who_depend.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_others_who_depend['name'] = name_entry_edit.get()
                selected_others_who_depend['email'] = email_entry_edit.get()
                selected_others_who_depend['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "others_who_depend updated successfully!")
                print_others_who_depend()  # Update the others_who_depend listbox after editing a others_who_depend
                edit_others_who_depend_window.destroy()

            tk.Button(edit_others_who_depend_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No others_who_depend Selected", "Please select a others_who_depend to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'others_who_depend':
                    continue  # Skip printing others_who_depend here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print others_who_depend information
            c.drawString(100, y_position, "others_who_depend:")
            y_position -= 20
            for others_who_depend in profile.get('others_who_depend', []):
                others_who_depend_info = f"Name: {others_who_depend['name']}, Email: {others_who_depend.get('email', '')}, Phone: {others_who_depend.get('phone', '')}"
                c.drawString(100, y_position, others_who_depend_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(others_who_depend_window, text="Add others_who_depend", command=add_others_who_depend).pack(pady=5)
    tk.Button(others_who_depend_window, text="Edit others_who_depend", command=edit_others_who_depend).pack(pady=5)
    tk.Button(others_who_depend_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_others_who_depend()

def open_pets_and_livestock_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    pets_and_livestock_window = tk.Toplevel()
    pets_and_livestock_window.title(f"pets_and_livestock for Profile: {profile_name}")

    pets_and_livestock_list = tk.Listbox(pets_and_livestock_window, width=50, height=20)
    pets_and_livestock_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(pets_and_livestock_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    pets_and_livestock_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=pets_and_livestock_list.yview)

    def print_pets_and_livestock():
        pets_and_livestock_list.delete(0, tk.END)
        for pets_and_livestock in profile.get('pets_and_livestock', []):
            pets_and_livestock_info = f"Name: {pets_and_livestock['name']}, Email: {pets_and_livestock.get('email', '')}, Phone: {pets_and_livestock.get('phone', '')}"
            pets_and_livestock_list.insert(tk.END, pets_and_livestock_info)

    def add_pets_and_livestock():
        add_pets_and_livestock_window = tk.Toplevel()
        add_pets_and_livestock_window.title("Add pets_and_livestock")

        tk.Label(add_pets_and_livestock_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_pets_and_livestock_window)
        name_entry.pack()

        tk.Label(add_pets_and_livestock_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_pets_and_livestock_window)
        email_entry.pack()

        tk.Label(add_pets_and_livestock_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_pets_and_livestock_window)
        phone_entry.pack()

        def save_pets_and_livestock():
            if 'pets_and_livestock' not in profile:
                profile['pets_and_livestock'] = []  # Initialize 'pets_and_livestock' list if it doesn't exist
            pets_and_livestock = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['pets_and_livestock'].append(pets_and_livestock)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "pets_and_livestock added successfully!")
            print_pets_and_livestock()  # Update the pets_and_livestock listbox after adding a new pets_and_livestock
            add_pets_and_livestock_window.destroy()

        tk.Button(add_pets_and_livestock_window, text="Save pets_and_livestock", command=save_pets_and_livestock).pack(pady=20)


    def edit_pets_and_livestock():
        selected_index = pets_and_livestock_list.curselection()
        if selected_index:
            selected_pets_and_livestock = profile['pets_and_livestock'][selected_index[0]]
            edit_pets_and_livestock_window = tk.Toplevel()
            edit_pets_and_livestock_window.title("Edit pets_and_livestock")

            tk.Label(edit_pets_and_livestock_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_pets_and_livestock_window)
            name_entry_edit.insert(0, selected_pets_and_livestock['name'])
            name_entry_edit.pack()

            tk.Label(edit_pets_and_livestock_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_pets_and_livestock_window)
            email_entry_edit.insert(0, selected_pets_and_livestock.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_pets_and_livestock_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_pets_and_livestock_window)
            phone_entry_edit.insert(0, selected_pets_and_livestock.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_pets_and_livestock['name'] = name_entry_edit.get()
                selected_pets_and_livestock['email'] = email_entry_edit.get()
                selected_pets_and_livestock['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "pets_and_livestock updated successfully!")
                print_pets_and_livestock()  # Update the pets_and_livestock listbox after editing a pets_and_livestock
                edit_pets_and_livestock_window.destroy()

            tk.Button(edit_pets_and_livestock_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No pets_and_livestock Selected", "Please select a pets_and_livestock to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'pets_and_livestock':
                    continue  # Skip printing pets_and_livestock here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print pets_and_livestock information
            c.drawString(100, y_position, "pets_and_livestock:")
            y_position -= 20
            for pets_and_livestock in profile.get('pets_and_livestock', []):
                pets_and_livestock_info = f"Name: {pets_and_livestock['name']}, Email: {pets_and_livestock.get('email', '')}, Phone: {pets_and_livestock.get('phone', '')}"
                c.drawString(100, y_position, pets_and_livestock_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(pets_and_livestock_window, text="Add pets_and_livestock", command=add_pets_and_livestock).pack(pady=5)
    tk.Button(pets_and_livestock_window, text="Edit pets_and_livestock", command=edit_pets_and_livestock).pack(pady=5)
    tk.Button(pets_and_livestock_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_pets_and_livestock()


def open_pets_and_livestock_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    pets_and_livestock_window = tk.Toplevel()
    pets_and_livestock_window.title(f"pets_and_livestock for Profile: {profile_name}")

    pets_and_livestock_list = tk.Listbox(pets_and_livestock_window, width=50, height=20)
    pets_and_livestock_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(pets_and_livestock_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    pets_and_livestock_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=pets_and_livestock_list.yview)

    def print_pets_and_livestock():
        pets_and_livestock_list.delete(0, tk.END)
        for pets_and_livestock in profile.get('pets_and_livestock', []):
            pets_and_livestock_info = f"Name: {pets_and_livestock['name']}, Email: {pets_and_livestock.get('email', '')}, Phone: {pets_and_livestock.get('phone', '')}"
            pets_and_livestock_list.insert(tk.END, pets_and_livestock_info)

    def add_pets_and_livestock():
        add_pets_and_livestock_window = tk.Toplevel()
        add_pets_and_livestock_window.title("Add pets_and_livestock")

        tk.Label(add_pets_and_livestock_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_pets_and_livestock_window)
        name_entry.pack()

        tk.Label(add_pets_and_livestock_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_pets_and_livestock_window)
        email_entry.pack()

        tk.Label(add_pets_and_livestock_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_pets_and_livestock_window)
        phone_entry.pack()

        def save_pets_and_livestock():
            if 'pets_and_livestock' not in profile:
                profile['pets_and_livestock'] = []  # Initialize 'pets_and_livestock' list if it doesn't exist
            pets_and_livestock = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['pets_and_livestock'].append(pets_and_livestock)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "pets_and_livestock added successfully!")
            print_pets_and_livestock()  # Update the pets_and_livestock listbox after adding a new pets_and_livestock
            add_pets_and_livestock_window.destroy()

        tk.Button(add_pets_and_livestock_window, text="Save pets_and_livestock", command=save_pets_and_livestock).pack(pady=20)


    def edit_pets_and_livestock():
        selected_index = pets_and_livestock_list.curselection()
        if selected_index:
            selected_pets_and_livestock = profile['pets_and_livestock'][selected_index[0]]
            edit_pets_and_livestock_window = tk.Toplevel()
            edit_pets_and_livestock_window.title("Edit pets_and_livestock")

            tk.Label(edit_pets_and_livestock_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_pets_and_livestock_window)
            name_entry_edit.insert(0, selected_pets_and_livestock['name'])
            name_entry_edit.pack()

            tk.Label(edit_pets_and_livestock_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_pets_and_livestock_window)
            email_entry_edit.insert(0, selected_pets_and_livestock.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_pets_and_livestock_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_pets_and_livestock_window)
            phone_entry_edit.insert(0, selected_pets_and_livestock.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_pets_and_livestock['name'] = name_entry_edit.get()
                selected_pets_and_livestock['email'] = email_entry_edit.get()
                selected_pets_and_livestock['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "pets_and_livestock updated successfully!")
                print_pets_and_livestock()  # Update the pets_and_livestock listbox after editing a pets_and_livestock
                edit_pets_and_livestock_window.destroy()

            tk.Button(edit_pets_and_livestock_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No pets_and_livestock Selected", "Please select a pets_and_livestock to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'pets_and_livestock':
                    continue  # Skip printing pets_and_livestock here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print pets_and_livestock information
            c.drawString(100, y_position, "pets_and_livestock:")
            y_position -= 20
            for pets_and_livestock in profile.get('pets_and_livestock', []):
                pets_and_livestock_info = f"Name: {pets_and_livestock['name']}, Email: {pets_and_livestock.get('email', '')}, Phone: {pets_and_livestock.get('phone', '')}"
                c.drawString(100, y_position, pets_and_livestock_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(pets_and_livestock_window, text="Add pets_and_livestock", command=add_pets_and_livestock).pack(pady=5)
    tk.Button(pets_and_livestock_window, text="Edit pets_and_livestock", command=edit_pets_and_livestock).pack(pady=5)
    tk.Button(pets_and_livestock_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_pets_and_livestock()


def open_children_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    children_window = tk.Toplevel()
    children_window.title(f"children for Profile: {profile_name}")

    children_list = tk.Listbox(children_window, width=50, height=20)
    children_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(children_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    children_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=children_list.yview)

    def print_children():
        children_list.delete(0, tk.END)
        for children in profile.get('children', []):
            children_info = f"Name: {children['name']}, Email: {children.get('email', '')}, Phone: {children.get('phone', '')}"
            children_list.insert(tk.END, children_info)

    def add_children():
        add_children_window = tk.Toplevel()
        add_children_window.title("Add children")

        tk.Label(add_children_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_children_window)
        name_entry.pack()

        tk.Label(add_children_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_children_window)
        email_entry.pack()

        tk.Label(add_children_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_children_window)
        phone_entry.pack()

        def save_children():
            if 'children' not in profile:
                profile['children'] = []  # Initialize 'children' list if it doesn't exist
            children = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['children'].append(children)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "children added successfully!")
            print_children()  # Update the children listbox after adding a new children
            add_children_window.destroy()

        tk.Button(add_children_window, text="Save children", command=save_children).pack(pady=20)


    def edit_children():
        selected_index = children_list.curselection()
        if selected_index:
            selected_children = profile['children'][selected_index[0]]
            edit_children_window = tk.Toplevel()
            edit_children_window.title("Edit children")

            tk.Label(edit_children_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_children_window)
            name_entry_edit.insert(0, selected_children['name'])
            name_entry_edit.pack()

            tk.Label(edit_children_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_children_window)
            email_entry_edit.insert(0, selected_children.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_children_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_children_window)
            phone_entry_edit.insert(0, selected_children.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_children['name'] = name_entry_edit.get()
                selected_children['email'] = email_entry_edit.get()
                selected_children['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "children updated successfully!")
                print_children()  # Update the children listbox after editing a children
                edit_children_window.destroy()

            tk.Button(edit_children_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No children Selected", "Please select a children to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'children':
                    continue  # Skip printing children here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print children information
            c.drawString(100, y_position, "children:")
            y_position -= 20
            for children in profile.get('children', []):
                children_info = f"Name: {children['name']}, Email: {children.get('email', '')}, Phone: {children.get('phone', '')}"
                c.drawString(100, y_position, children_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(children_window, text="Add children", command=add_children).pack(pady=5)
    tk.Button(children_window, text="Edit children", command=edit_children).pack(pady=5)
    tk.Button(children_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_children()


def open_vehicles_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    vehicles_window = tk.Toplevel()
    vehicles_window.title(f"vehicles for Profile: {profile_name}")

    vehicles_list = tk.Listbox(vehicles_window, width=50, height=20)
    vehicles_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(vehicles_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    vehicles_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=vehicles_list.yview)

    def print_vehicles():
        vehicles_list.delete(0, tk.END)
        for vehicles in profile.get('vehicles', []):
            vehicles_info = f"Name: {vehicles['name']}, Email: {vehicles.get('email', '')}, Phone: {vehicles.get('phone', '')}"
            vehicles_list.insert(tk.END, vehicles_info)

    def add_vehicles():
        add_vehicles_window = tk.Toplevel()
        add_vehicles_window.title("Add vehicles")

        tk.Label(add_vehicles_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_vehicles_window)
        name_entry.pack()

        tk.Label(add_vehicles_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_vehicles_window)
        email_entry.pack()

        tk.Label(add_vehicles_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_vehicles_window)
        phone_entry.pack()

        def save_vehicles():
            if 'vehicles' not in profile:
                profile['vehicles'] = []  # Initialize 'vehicles' list if it doesn't exist
            vehicles = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['vehicles'].append(vehicles)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "vehicles added successfully!")
            print_vehicles()  # Update the vehicles listbox after adding a new vehicles
            add_vehicles_window.destroy()

        tk.Button(add_vehicles_window, text="Save vehicles", command=save_vehicles).pack(pady=20)


    def edit_vehicles():
        selected_index = vehicles_list.curselection()
        if selected_index:
            selected_vehicles = profile['vehicles'][selected_index[0]]
            edit_vehicles_window = tk.Toplevel()
            edit_vehicles_window.title("Edit vehicles")

            tk.Label(edit_vehicles_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_vehicles_window)
            name_entry_edit.insert(0, selected_vehicles['name'])
            name_entry_edit.pack()

            tk.Label(edit_vehicles_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_vehicles_window)
            email_entry_edit.insert(0, selected_vehicles.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_vehicles_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_vehicles_window)
            phone_entry_edit.insert(0, selected_vehicles.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_vehicles['name'] = name_entry_edit.get()
                selected_vehicles['email'] = email_entry_edit.get()
                selected_vehicles['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "vehicles updated successfully!")
                print_vehicles()  # Update the vehicles listbox after editing a vehicles
                edit_vehicles_window.destroy()

            tk.Button(edit_vehicles_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No vehicles Selected", "Please select a vehicles to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'vehicles':
                    continue  # Skip printing vehicles here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print vehicles information
            c.drawString(100, y_position, "vehicles:")
            y_position -= 20
            for vehicles in profile.get('vehicles', []):
                vehicles_info = f"Name: {vehicles['name']}, Email: {vehicles.get('email', '')}, Phone: {vehicles.get('phone', '')}"
                c.drawString(100, y_position, vehicles_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(vehicles_window, text="Add vehicles", command=add_vehicles).pack(pady=5)
    tk.Button(vehicles_window, text="Edit vehicles", command=edit_vehicles).pack(pady=5)
    tk.Button(vehicles_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_vehicles()



def open_business_interests_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    business_interests_window = tk.Toplevel()
    business_interests_window.title(f"business_interests for Profile: {profile_name}")

    business_interests_list = tk.Listbox(business_interests_window, width=50, height=20)
    business_interests_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(business_interests_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    business_interests_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=business_interests_list.yview)

    def print_business_interests():
        business_interests_list.delete(0, tk.END)
        for business_interests in profile.get('business_interests', []):
            business_interests_info = f"Name: {business_interests['name']}, Email: {business_interests.get('email', '')}, Phone: {business_interests.get('phone', '')}"
            business_interests_list.insert(tk.END, business_interests_info)

    def add_business_interests():
        add_business_interests_window = tk.Toplevel()
        add_business_interests_window.title("Add business_interests")

        tk.Label(add_business_interests_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_business_interests_window)
        name_entry.pack()

        tk.Label(add_business_interests_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_business_interests_window)
        email_entry.pack()

        tk.Label(add_business_interests_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_business_interests_window)
        phone_entry.pack()

        def save_business_interests():
            if 'business_interests' not in profile:
                profile['business_interests'] = []  # Initialize 'business_interests' list if it doesn't exist
            business_interests = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['business_interests'].append(business_interests)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "business_interests added successfully!")
            print_business_interests()  # Update the business_interests listbox after adding a new business_interests
            add_business_interests_window.destroy()

        tk.Button(add_business_interests_window, text="Save business_interests", command=save_business_interests).pack(pady=20)


    def edit_business_interests():
        selected_index = business_interests_list.curselection()
        if selected_index:
            selected_business_interests = profile['business_interests'][selected_index[0]]
            edit_business_interests_window = tk.Toplevel()
            edit_business_interests_window.title("Edit business_interests")

            tk.Label(edit_business_interests_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_business_interests_window)
            name_entry_edit.insert(0, selected_business_interests['name'])
            name_entry_edit.pack()

            tk.Label(edit_business_interests_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_business_interests_window)
            email_entry_edit.insert(0, selected_business_interests.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_business_interests_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_business_interests_window)
            phone_entry_edit.insert(0, selected_business_interests.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_business_interests['name'] = name_entry_edit.get()
                selected_business_interests['email'] = email_entry_edit.get()
                selected_business_interests['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "business_interests updated successfully!")
                print_business_interests()  # Update the business_interests listbox after editing a business_interests
                edit_business_interests_window.destroy()

            tk.Button(edit_business_interests_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No business_interests Selected", "Please select a business_interests to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'business_interests':
                    continue  # Skip printing business_interests here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print business_interests information
            c.drawString(100, y_position, "business_interests:")
            y_position -= 20
            for business_interests in profile.get('business_interests', []):
                business_interests_info = f"Name: {business_interests['name']}, Email: {business_interests.get('email', '')}, Phone: {business_interests.get('phone', '')}"
                c.drawString(100, y_position, business_interests_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(business_interests_window, text="Add business_interests", command=add_business_interests).pack(pady=5)
    tk.Button(business_interests_window, text="Edit business_interests", command=edit_business_interests).pack(pady=5)
    tk.Button(business_interests_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_business_interests()

def open_insurance_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    insurance_window = tk.Toplevel()
    insurance_window.title(f"insurance for Profile: {profile_name}")

    insurance_list = tk.Listbox(insurance_window, width=50, height=20)
    insurance_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(insurance_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    insurance_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=insurance_list.yview)

    def print_insurance():
        insurance_list.delete(0, tk.END)
        for insurance in profile.get('insurance', []):
            insurance_info = f"Name: {insurance['name']}, Email: {insurance.get('email', '')}, Phone: {insurance.get('phone', '')}"
            insurance_list.insert(tk.END, insurance_info)

    def add_insurance():
        add_insurance_window = tk.Toplevel()
        add_insurance_window.title("Add insurance")

        tk.Label(add_insurance_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_insurance_window)
        name_entry.pack()

        tk.Label(add_insurance_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_insurance_window)
        email_entry.pack()

        tk.Label(add_insurance_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_insurance_window)
        phone_entry.pack()

        def save_insurance():
            if 'insurance' not in profile:
                profile['insurance'] = []  # Initialize 'insurance' list if it doesn't exist
            insurance = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['insurance'].append(insurance)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "insurance added successfully!")
            print_insurance()  # Update the insurance listbox after adding a new insurance
            add_insurance_window.destroy()

        tk.Button(add_insurance_window, text="Save insurance", command=save_insurance).pack(pady=20)


    def edit_insurance():
        selected_index = insurance_list.curselection()
        if selected_index:
            selected_insurance = profile['insurance'][selected_index[0]]
            edit_insurance_window = tk.Toplevel()
            edit_insurance_window.title("Edit insurance")

            tk.Label(edit_insurance_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_insurance_window)
            name_entry_edit.insert(0, selected_insurance['name'])
            name_entry_edit.pack()

            tk.Label(edit_insurance_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_insurance_window)
            email_entry_edit.insert(0, selected_insurance.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_insurance_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_insurance_window)
            phone_entry_edit.insert(0, selected_insurance.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_insurance['name'] = name_entry_edit.get()
                selected_insurance['email'] = email_entry_edit.get()
                selected_insurance['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "insurance updated successfully!")
                print_insurance()  # Update the insurance listbox after editing a insurance
                edit_insurance_window.destroy()

            tk.Button(edit_insurance_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No insurance Selected", "Please select a insurance to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'insurance':
                    continue  # Skip printing insurance here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print insurance information
            c.drawString(100, y_position, "insurance:")
            y_position -= 20
            for insurance in profile.get('insurance', []):
                insurance_info = f"Name: {insurance['name']}, Email: {insurance.get('email', '')}, Phone: {insurance.get('phone', '')}"
                c.drawString(100, y_position, insurance_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(insurance_window, text="Add insurance", command=add_insurance).pack(pady=5)
    tk.Button(insurance_window, text="Edit insurance", command=edit_insurance).pack(pady=5)
    tk.Button(insurance_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_insurance()

def open_letter_to_loved_ones_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    letter_to_loved_ones_window = tk.Toplevel()
    letter_to_loved_ones_window.title(f"letter_to_loved_ones for Profile: {profile_name}")

    letter_to_loved_ones_list = tk.Listbox(letter_to_loved_ones_window, width=50, height=20)
    letter_to_loved_ones_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(letter_to_loved_ones_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    letter_to_loved_ones_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=letter_to_loved_ones_list.yview)

    def print_letter_to_loved_ones():
        letter_to_loved_ones_list.delete(0, tk.END)
        for letter_to_loved_ones in profile.get('letter_to_loved_ones', []):
            letter_to_loved_ones_info = f"Name: {letter_to_loved_ones['name']}, Email: {letter_to_loved_ones.get('email', '')}, Phone: {letter_to_loved_ones.get('phone', '')}"
            letter_to_loved_ones_list.insert(tk.END, letter_to_loved_ones_info)

    def add_letter_to_loved_ones():
        add_letter_to_loved_ones_window = tk.Toplevel()
        add_letter_to_loved_ones_window.title("Add letter_to_loved_ones")

        tk.Label(add_letter_to_loved_ones_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_letter_to_loved_ones_window)
        name_entry.pack()

        tk.Label(add_letter_to_loved_ones_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_letter_to_loved_ones_window)
        email_entry.pack()

        tk.Label(add_letter_to_loved_ones_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_letter_to_loved_ones_window)
        phone_entry.pack()

        def save_letter_to_loved_ones():
            if 'letter_to_loved_ones' not in profile:
                profile['letter_to_loved_ones'] = []  # Initialize 'letter_to_loved_ones' list if it doesn't exist
            letter_to_loved_ones = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['letter_to_loved_ones'].append(letter_to_loved_ones)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "letter_to_loved_ones added successfully!")
            print_letter_to_loved_ones()  # Update the letter_to_loved_ones listbox after adding a new letter_to_loved_ones
            add_letter_to_loved_ones_window.destroy()

        tk.Button(add_letter_to_loved_ones_window, text="Save letter_to_loved_ones", command=save_letter_to_loved_ones).pack(pady=20)


    def edit_letter_to_loved_ones():
        selected_index = letter_to_loved_ones_list.curselection()
        if selected_index:
            selected_letter_to_loved_ones = profile['letter_to_loved_ones'][selected_index[0]]
            edit_letter_to_loved_ones_window = tk.Toplevel()
            edit_letter_to_loved_ones_window.title("Edit letter_to_loved_ones")

            tk.Label(edit_letter_to_loved_ones_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_letter_to_loved_ones_window)
            name_entry_edit.insert(0, selected_letter_to_loved_ones['name'])
            name_entry_edit.pack()

            tk.Label(edit_letter_to_loved_ones_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_letter_to_loved_ones_window)
            email_entry_edit.insert(0, selected_letter_to_loved_ones.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_letter_to_loved_ones_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_letter_to_loved_ones_window)
            phone_entry_edit.insert(0, selected_letter_to_loved_ones.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_letter_to_loved_ones['name'] = name_entry_edit.get()
                selected_letter_to_loved_ones['email'] = email_entry_edit.get()
                selected_letter_to_loved_ones['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "letter_to_loved_ones updated successfully!")
                print_letter_to_loved_ones()  # Update the letter_to_loved_ones listbox after editing a letter_to_loved_ones
                edit_letter_to_loved_ones_window.destroy()

            tk.Button(edit_letter_to_loved_ones_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No letter_to_loved_ones Selected", "Please select a letter_to_loved_ones to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'letter_to_loved_ones':
                    continue  # Skip printing letter_to_loved_ones here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print letter_to_loved_ones information
            c.drawString(100, y_position, "letter_to_loved_ones:")
            y_position -= 20
            for letter_to_loved_ones in profile.get('letter_to_loved_ones', []):
                letter_to_loved_ones_info = f"Name: {letter_to_loved_ones['name']}, Email: {letter_to_loved_ones.get('email', '')}, Phone: {letter_to_loved_ones.get('phone', '')}"
                c.drawString(100, y_position, letter_to_loved_ones_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(letter_to_loved_ones_window, text="Add letter_to_loved_ones", command=add_letter_to_loved_ones).pack(pady=5)
    tk.Button(letter_to_loved_ones_window, text="Edit letter_to_loved_ones", command=edit_letter_to_loved_ones).pack(pady=5)
    tk.Button(letter_to_loved_ones_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_letter_to_loved_ones()


def open_instructions_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    instructions_window = tk.Toplevel()
    instructions_window.title(f"instructions for Profile: {profile_name}")

    instructions_list = tk.Listbox(instructions_window, width=50, height=20)
    instructions_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(instructions_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    instructions_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=instructions_list.yview)

    def print_instructions():
        instructions_list.delete(0, tk.END)
        for instructions in profile.get('instructions', []):
            instructions_info = f"Name: {instructions['name']}, Email: {instructions.get('email', '')}, Phone: {instructions.get('phone', '')}"
            instructions_list.insert(tk.END, instructions_info)

    def add_instructions():
        add_instructions_window = tk.Toplevel()
        add_instructions_window.title("Add instructions")

        tk.Label(add_instructions_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_instructions_window)
        name_entry.pack()

        tk.Label(add_instructions_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_instructions_window)
        email_entry.pack()

        tk.Label(add_instructions_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_instructions_window)
        phone_entry.pack()

        def save_instructions():
            if 'instructions' not in profile:
                profile['instructions'] = []  # Initialize 'instructions' list if it doesn't exist
            instructions = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['instructions'].append(instructions)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "instructions added successfully!")
            print_instructions()  # Update the instructions listbox after adding a new instructions
            add_instructions_window.destroy()

        tk.Button(add_instructions_window, text="Save instructions", command=save_instructions).pack(pady=20)


    def edit_instructions():
        selected_index = instructions_list.curselection()
        if selected_index:
            selected_instructions = profile['instructions'][selected_index[0]]
            edit_instructions_window = tk.Toplevel()
            edit_instructions_window.title("Edit instructions")

            tk.Label(edit_instructions_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_instructions_window)
            name_entry_edit.insert(0, selected_instructions['name'])
            name_entry_edit.pack()

            tk.Label(edit_instructions_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_instructions_window)
            email_entry_edit.insert(0, selected_instructions.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_instructions_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_instructions_window)
            phone_entry_edit.insert(0, selected_instructions.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_instructions['name'] = name_entry_edit.get()
                selected_instructions['email'] = email_entry_edit.get()
                selected_instructions['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "instructions updated successfully!")
                print_instructions()  # Update the instructions listbox after editing a instructions
                edit_instructions_window.destroy()

            tk.Button(edit_instructions_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No instructions Selected", "Please select a instructions to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'instructions':
                    continue  # Skip printing instructions here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print instructions information
            c.drawString(100, y_position, "instructions:")
            y_position -= 20
            for instructions in profile.get('instructions', []):
                instructions_info = f"Name: {instructions['name']}, Email: {instructions.get('email', '')}, Phone: {instructions.get('phone', '')}"
                c.drawString(100, y_position, instructions_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(instructions_window, text="Add instructions", command=add_instructions).pack(pady=5)
    tk.Button(instructions_window, text="Edit instructions", command=edit_instructions).pack(pady=5)
    tk.Button(instructions_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_instructions()

def open_instructions_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    instructions_window = tk.Toplevel()
    instructions_window.title(f"instructions for Profile: {profile_name}")

    instructions_list = tk.Listbox(instructions_window, width=50, height=20)
    instructions_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(instructions_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    instructions_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=instructions_list.yview)

    def print_instructions():
        instructions_list.delete(0, tk.END)
        for instructions in profile.get('instructions', []):
            instructions_info = f"Name: {instructions['name']}, Email: {instructions.get('email', '')}, Phone: {instructions.get('phone', '')}"
            instructions_list.insert(tk.END, instructions_info)

    def add_instructions():
        add_instructions_window = tk.Toplevel()
        add_instructions_window.title("Add instructions")

        tk.Label(add_instructions_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_instructions_window)
        name_entry.pack()

        tk.Label(add_instructions_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_instructions_window)
        email_entry.pack()

        tk.Label(add_instructions_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_instructions_window)
        phone_entry.pack()

        def save_instructions():
            if 'instructions' not in profile:
                profile['instructions'] = []  # Initialize 'instructions' list if it doesn't exist
            instructions = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['instructions'].append(instructions)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "instructions added successfully!")
            print_instructions()  # Update the instructions listbox after adding a new instructions
            add_instructions_window.destroy()

        tk.Button(add_instructions_window, text="Save instructions", command=save_instructions).pack(pady=20)


    def edit_instructions():
        selected_index = instructions_list.curselection()
        if selected_index:
            selected_instructions = profile['instructions'][selected_index[0]]
            edit_instructions_window = tk.Toplevel()
            edit_instructions_window.title("Edit instructions")

            tk.Label(edit_instructions_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_instructions_window)
            name_entry_edit.insert(0, selected_instructions['name'])
            name_entry_edit.pack()

            tk.Label(edit_instructions_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_instructions_window)
            email_entry_edit.insert(0, selected_instructions.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_instructions_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_instructions_window)
            phone_entry_edit.insert(0, selected_instructions.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_instructions['name'] = name_entry_edit.get()
                selected_instructions['email'] = email_entry_edit.get()
                selected_instructions['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "instructions updated successfully!")
                print_instructions()  # Update the instructions listbox after editing a instructions
                edit_instructions_window.destroy()

            tk.Button(edit_instructions_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No instructions Selected", "Please select a instructions to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'instructions':
                    continue  # Skip printing instructions here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print instructions information
            c.drawString(100, y_position, "instructions:")
            y_position -= 20
            for instructions in profile.get('instructions', []):
                instructions_info = f"Name: {instructions['name']}, Email: {instructions.get('email', '')}, Phone: {instructions.get('phone', '')}"
                c.drawString(100, y_position, instructions_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(instructions_window, text="Add instructions", command=add_instructions).pack(pady=5)
    tk.Button(instructions_window, text="Edit instructions", command=edit_instructions).pack(pady=5)
    tk.Button(instructions_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_instructions()

def open_memberships_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    memberships_window = tk.Toplevel()
    memberships_window.title(f"memberships for Profile: {profile_name}")

    memberships_list = tk.Listbox(memberships_window, width=50, height=20)
    memberships_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(memberships_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    memberships_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=memberships_list.yview)

    def print_memberships():
        memberships_list.delete(0, tk.END)
        for memberships in profile.get('memberships', []):
            memberships_info = f"Name: {memberships['name']}, Email: {memberships.get('email', '')}, Phone: {memberships.get('phone', '')}"
            memberships_list.insert(tk.END, memberships_info)

    def add_memberships():
        add_memberships_window = tk.Toplevel()
        add_memberships_window.title("Add memberships")

        tk.Label(add_memberships_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_memberships_window)
        name_entry.pack()

        tk.Label(add_memberships_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_memberships_window)
        email_entry.pack()

        tk.Label(add_memberships_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_memberships_window)
        phone_entry.pack()

        def save_memberships():
            if 'memberships' not in profile:
                profile['memberships'] = []  # Initialize 'memberships' list if it doesn't exist
            memberships = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['memberships'].append(memberships)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "memberships added successfully!")
            print_memberships()  # Update the memberships listbox after adding a new memberships
            add_memberships_window.destroy()

        tk.Button(add_memberships_window, text="Save memberships", command=save_memberships).pack(pady=20)


    def edit_memberships():
        selected_index = memberships_list.curselection()
        if selected_index:
            selected_memberships = profile['memberships'][selected_index[0]]
            edit_memberships_window = tk.Toplevel()
            edit_memberships_window.title("Edit memberships")

            tk.Label(edit_memberships_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_memberships_window)
            name_entry_edit.insert(0, selected_memberships['name'])
            name_entry_edit.pack()

            tk.Label(edit_memberships_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_memberships_window)
            email_entry_edit.insert(0, selected_memberships.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_memberships_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_memberships_window)
            phone_entry_edit.insert(0, selected_memberships.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_memberships['name'] = name_entry_edit.get()
                selected_memberships['email'] = email_entry_edit.get()
                selected_memberships['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "memberships updated successfully!")
                print_memberships()  # Update the memberships listbox after editing a memberships
                edit_memberships_window.destroy()

            tk.Button(edit_memberships_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No memberships Selected", "Please select a memberships to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'memberships':
                    continue  # Skip printing memberships here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print memberships information
            c.drawString(100, y_position, "memberships:")
            y_position -= 20
            for memberships in profile.get('memberships', []):
                memberships_info = f"Name: {memberships['name']}, Email: {memberships.get('email', '')}, Phone: {memberships.get('phone', '')}"
                c.drawString(100, y_position, memberships_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(memberships_window, text="Add memberships", command=add_memberships).pack(pady=5)
    tk.Button(memberships_window, text="Edit memberships", command=edit_memberships).pack(pady=5)
    tk.Button(memberships_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_memberships()

def open_service_providers_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    service_providers_window = tk.Toplevel()
    service_providers_window.title(f"service_providers for Profile: {profile_name}")

    service_providers_list = tk.Listbox(service_providers_window, width=50, height=20)
    service_providers_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(service_providers_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    service_providers_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=service_providers_list.yview)

    def print_service_providers():
        service_providers_list.delete(0, tk.END)
        for service_providers in profile.get('service_providers', []):
            service_providers_info = f"Name: {service_providers['name']}, Email: {service_providers.get('email', '')}, Phone: {service_providers.get('phone', '')}"
            service_providers_list.insert(tk.END, service_providers_info)

    def add_service_providers():
        add_service_providers_window = tk.Toplevel()
        add_service_providers_window.title("Add service_providers")

        tk.Label(add_service_providers_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_service_providers_window)
        name_entry.pack()

        tk.Label(add_service_providers_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_service_providers_window)
        email_entry.pack()

        tk.Label(add_service_providers_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_service_providers_window)
        phone_entry.pack()

        def save_service_providers():
            if 'service_providers' not in profile:
                profile['service_providers'] = []  # Initialize 'service_providers' list if it doesn't exist
            service_providers = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['service_providers'].append(service_providers)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "service_providers added successfully!")
            print_service_providers()  # Update the service_providers listbox after adding a new service_providers
            add_service_providers_window.destroy()

        tk.Button(add_service_providers_window, text="Save service_providers", command=save_service_providers).pack(pady=20)


    def edit_service_providers():
        selected_index = service_providers_list.curselection()
        if selected_index:
            selected_service_providers = profile['service_providers'][selected_index[0]]
            edit_service_providers_window = tk.Toplevel()
            edit_service_providers_window.title("Edit service_providers")

            tk.Label(edit_service_providers_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_service_providers_window)
            name_entry_edit.insert(0, selected_service_providers['name'])
            name_entry_edit.pack()

            tk.Label(edit_service_providers_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_service_providers_window)
            email_entry_edit.insert(0, selected_service_providers.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_service_providers_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_service_providers_window)
            phone_entry_edit.insert(0, selected_service_providers.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_service_providers['name'] = name_entry_edit.get()
                selected_service_providers['email'] = email_entry_edit.get()
                selected_service_providers['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "service_providers updated successfully!")
                print_service_providers()  # Update the service_providers listbox after editing a service_providers
                edit_service_providers_window.destroy()

            tk.Button(edit_service_providers_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No service_providers Selected", "Please select a service_providers to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'service_providers':
                    continue  # Skip printing service_providers here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print service_providers information
            c.drawString(100, y_position, "service_providers:")
            y_position -= 20
            for service_providers in profile.get('service_providers', []):
                service_providers_info = f"Name: {service_providers['name']}, Email: {service_providers.get('email', '')}, Phone: {service_providers.get('phone', '')}"
                c.drawString(100, y_position, service_providers_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(service_providers_window, text="Add service_providers", command=add_service_providers).pack(pady=5)
    tk.Button(service_providers_window, text="Edit service_providers", command=edit_service_providers).pack(pady=5)
    tk.Button(service_providers_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_service_providers()

def open_health_care_directives_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    health_care_directives_window = tk.Toplevel()
    health_care_directives_window.title(f"health_care_directives for Profile: {profile_name}")

    health_care_directives_list = tk.Listbox(health_care_directives_window, width=50, height=20)
    health_care_directives_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(health_care_directives_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    health_care_directives_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=health_care_directives_list.yview)

    def print_health_care_directives():
        health_care_directives_list.delete(0, tk.END)
        for health_care_directives in profile.get('health_care_directives', []):
            health_care_directives_info = f"Name: {health_care_directives['name']}, Email: {health_care_directives.get('email', '')}, Phone: {health_care_directives.get('phone', '')}"
            health_care_directives_list.insert(tk.END, health_care_directives_info)

    def add_health_care_directives():
        add_health_care_directives_window = tk.Toplevel()
        add_health_care_directives_window.title("Add health_care_directives")

        tk.Label(add_health_care_directives_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_health_care_directives_window)
        name_entry.pack()

        tk.Label(add_health_care_directives_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_health_care_directives_window)
        email_entry.pack()

        tk.Label(add_health_care_directives_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_health_care_directives_window)
        phone_entry.pack()

        def save_health_care_directives():
            if 'health_care_directives' not in profile:
                profile['health_care_directives'] = []  # Initialize 'health_care_directives' list if it doesn't exist
            health_care_directives = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['health_care_directives'].append(health_care_directives)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "health_care_directives added successfully!")
            print_health_care_directives()  # Update the health_care_directives listbox after adding a new health_care_directives
            add_health_care_directives_window.destroy()

        tk.Button(add_health_care_directives_window, text="Save health_care_directives", command=save_health_care_directives).pack(pady=20)


    def edit_health_care_directives():
        selected_index = health_care_directives_list.curselection()
        if selected_index:
            selected_health_care_directives = profile['health_care_directives'][selected_index[0]]
            edit_health_care_directives_window = tk.Toplevel()
            edit_health_care_directives_window.title("Edit health_care_directives")

            tk.Label(edit_health_care_directives_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_health_care_directives_window)
            name_entry_edit.insert(0, selected_health_care_directives['name'])
            name_entry_edit.pack()

            tk.Label(edit_health_care_directives_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_health_care_directives_window)
            email_entry_edit.insert(0, selected_health_care_directives.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_health_care_directives_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_health_care_directives_window)
            phone_entry_edit.insert(0, selected_health_care_directives.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_health_care_directives['name'] = name_entry_edit.get()
                selected_health_care_directives['email'] = email_entry_edit.get()
                selected_health_care_directives['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "health_care_directives updated successfully!")
                print_health_care_directives()  # Update the health_care_directives listbox after editing a health_care_directives
                edit_health_care_directives_window.destroy()

            tk.Button(edit_health_care_directives_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No health_care_directives Selected", "Please select a health_care_directives to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'health_care_directives':
                    continue  # Skip printing health_care_directives here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print health_care_directives information
            c.drawString(100, y_position, "health_care_directives:")
            y_position -= 20
            for health_care_directives in profile.get('health_care_directives', []):
                health_care_directives_info = f"Name: {health_care_directives['name']}, Email: {health_care_directives.get('email', '')}, Phone: {health_care_directives.get('phone', '')}"
                c.drawString(100, y_position, health_care_directives_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(health_care_directives_window, text="Add health_care_directives", command=add_health_care_directives).pack(pady=5)
    tk.Button(health_care_directives_window, text="Edit health_care_directives", command=edit_health_care_directives).pack(pady=5)
    tk.Button(health_care_directives_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_health_care_directives()


def open_power_of_attorney_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    power_of_attorney_window = tk.Toplevel()
    power_of_attorney_window.title(f"power_of_attorney for Profile: {profile_name}")

    power_of_attorney_list = tk.Listbox(power_of_attorney_window, width=50, height=20)
    power_of_attorney_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(power_of_attorney_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    power_of_attorney_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=power_of_attorney_list.yview)

    def print_power_of_attorney():
        power_of_attorney_list.delete(0, tk.END)
        for power_of_attorney in profile.get('power_of_attorney', []):
            power_of_attorney_info = f"Name: {power_of_attorney['name']}, Email: {power_of_attorney.get('email', '')}, Phone: {power_of_attorney.get('phone', '')}"
            power_of_attorney_list.insert(tk.END, power_of_attorney_info)

    def add_power_of_attorney():
        add_power_of_attorney_window = tk.Toplevel()
        add_power_of_attorney_window.title("Add power_of_attorney")

        tk.Label(add_power_of_attorney_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_power_of_attorney_window)
        name_entry.pack()

        tk.Label(add_power_of_attorney_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_power_of_attorney_window)
        email_entry.pack()

        tk.Label(add_power_of_attorney_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_power_of_attorney_window)
        phone_entry.pack()

        def save_power_of_attorney():
            if 'power_of_attorney' not in profile:
                profile['power_of_attorney'] = []  # Initialize 'power_of_attorney' list if it doesn't exist
            power_of_attorney = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['power_of_attorney'].append(power_of_attorney)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "power_of_attorney added successfully!")
            print_power_of_attorney()  # Update the power_of_attorney listbox after adding a new power_of_attorney
            add_power_of_attorney_window.destroy()

        tk.Button(add_power_of_attorney_window, text="Save power_of_attorney", command=save_power_of_attorney).pack(pady=20)


    def edit_power_of_attorney():
        selected_index = power_of_attorney_list.curselection()
        if selected_index:
            selected_power_of_attorney = profile['power_of_attorney'][selected_index[0]]
            edit_power_of_attorney_window = tk.Toplevel()
            edit_power_of_attorney_window.title("Edit power_of_attorney")

            tk.Label(edit_power_of_attorney_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_power_of_attorney_window)
            name_entry_edit.insert(0, selected_power_of_attorney['name'])
            name_entry_edit.pack()

            tk.Label(edit_power_of_attorney_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_power_of_attorney_window)
            email_entry_edit.insert(0, selected_power_of_attorney.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_power_of_attorney_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_power_of_attorney_window)
            phone_entry_edit.insert(0, selected_power_of_attorney.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_power_of_attorney['name'] = name_entry_edit.get()
                selected_power_of_attorney['email'] = email_entry_edit.get()
                selected_power_of_attorney['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "power_of_attorney updated successfully!")
                print_power_of_attorney()  # Update the power_of_attorney listbox after editing a power_of_attorney
                edit_power_of_attorney_window.destroy()

            tk.Button(edit_power_of_attorney_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No power_of_attorney Selected", "Please select a power_of_attorney to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'power_of_attorney':
                    continue  # Skip printing power_of_attorney here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print power_of_attorney information
            c.drawString(100, y_position, "power_of_attorney:")
            y_position -= 20
            for power_of_attorney in profile.get('power_of_attorney', []):
                power_of_attorney_info = f"Name: {power_of_attorney['name']}, Email: {power_of_attorney.get('email', '')}, Phone: {power_of_attorney.get('phone', '')}"
                c.drawString(100, y_position, power_of_attorney_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(power_of_attorney_window, text="Add power_of_attorney", command=add_power_of_attorney).pack(pady=5)
    tk.Button(power_of_attorney_window, text="Edit power_of_attorney", command=edit_power_of_attorney).pack(pady=5)
    tk.Button(power_of_attorney_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_power_of_attorney()

def open_burial_cremation_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    burial_cremation_window = tk.Toplevel()
    burial_cremation_window.title(f"burial_cremation for Profile: {profile_name}")

    burial_cremation_list = tk.Listbox(burial_cremation_window, width=50, height=20)
    burial_cremation_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(burial_cremation_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    burial_cremation_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=burial_cremation_list.yview)

    def print_burial_cremation():
        burial_cremation_list.delete(0, tk.END)
        for burial_cremation in profile.get('burial_cremation', []):
            burial_cremation_info = f"Name: {burial_cremation['name']}, Email: {burial_cremation.get('email', '')}, Phone: {burial_cremation.get('phone', '')}"
            burial_cremation_list.insert(tk.END, burial_cremation_info)

    def add_burial_cremation():
        add_burial_cremation_window = tk.Toplevel()
        add_burial_cremation_window.title("Add burial_cremation")

        tk.Label(add_burial_cremation_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_burial_cremation_window)
        name_entry.pack()

        tk.Label(add_burial_cremation_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_burial_cremation_window)
        email_entry.pack()

        tk.Label(add_burial_cremation_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_burial_cremation_window)
        phone_entry.pack()

        def save_burial_cremation():
            if 'burial_cremation' not in profile:
                profile['burial_cremation'] = []  # Initialize 'burial_cremation' list if it doesn't exist
            burial_cremation = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['burial_cremation'].append(burial_cremation)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "burial_cremation added successfully!")
            print_burial_cremation()  # Update the burial_cremation listbox after adding a new burial_cremation
            add_burial_cremation_window.destroy()

        tk.Button(add_burial_cremation_window, text="Save burial_cremation", command=save_burial_cremation).pack(pady=20)


    def edit_burial_cremation():
        selected_index = burial_cremation_list.curselection()
        if selected_index:
            selected_burial_cremation = profile['burial_cremation'][selected_index[0]]
            edit_burial_cremation_window = tk.Toplevel()
            edit_burial_cremation_window.title("Edit burial_cremation")

            tk.Label(edit_burial_cremation_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_burial_cremation_window)
            name_entry_edit.insert(0, selected_burial_cremation['name'])
            name_entry_edit.pack()

            tk.Label(edit_burial_cremation_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_burial_cremation_window)
            email_entry_edit.insert(0, selected_burial_cremation.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_burial_cremation_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_burial_cremation_window)
            phone_entry_edit.insert(0, selected_burial_cremation.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_burial_cremation['name'] = name_entry_edit.get()
                selected_burial_cremation['email'] = email_entry_edit.get()
                selected_burial_cremation['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "burial_cremation updated successfully!")
                print_burial_cremation()  # Update the burial_cremation listbox after editing a burial_cremation
                edit_burial_cremation_window.destroy()

            tk.Button(edit_burial_cremation_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No burial_cremation Selected", "Please select a burial_cremation to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'burial_cremation':
                    continue  # Skip printing burial_cremation here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print burial_cremation information
            c.drawString(100, y_position, "burial_cremation:")
            y_position -= 20
            for burial_cremation in profile.get('burial_cremation', []):
                burial_cremation_info = f"Name: {burial_cremation['name']}, Email: {burial_cremation.get('email', '')}, Phone: {burial_cremation.get('phone', '')}"
                c.drawString(100, y_position, burial_cremation_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(burial_cremation_window, text="Add burial_cremation", command=add_burial_cremation).pack(pady=5)
    tk.Button(burial_cremation_window, text="Edit burial_cremation", command=edit_burial_cremation).pack(pady=5)
    tk.Button(burial_cremation_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_burial_cremation()

def open_funeral_services_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    funeral_services_window = tk.Toplevel()
    funeral_services_window.title(f"funeral_services for Profile: {profile_name}")

    funeral_services_list = tk.Listbox(funeral_services_window, width=50, height=20)
    funeral_services_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(funeral_services_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    funeral_services_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=funeral_services_list.yview)

    def print_funeral_services():
        funeral_services_list.delete(0, tk.END)
        for funeral_services in profile.get('funeral_services', []):
            funeral_services_info = f"Name: {funeral_services['name']}, Email: {funeral_services.get('email', '')}, Phone: {funeral_services.get('phone', '')}"
            funeral_services_list.insert(tk.END, funeral_services_info)

    def add_funeral_services():
        add_funeral_services_window = tk.Toplevel()
        add_funeral_services_window.title("Add funeral_services")

        tk.Label(add_funeral_services_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_funeral_services_window)
        name_entry.pack()

        tk.Label(add_funeral_services_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_funeral_services_window)
        email_entry.pack()

        tk.Label(add_funeral_services_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_funeral_services_window)
        phone_entry.pack()

        def save_funeral_services():
            if 'funeral_services' not in profile:
                profile['funeral_services'] = []  # Initialize 'funeral_services' list if it doesn't exist
            funeral_services = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['funeral_services'].append(funeral_services)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "funeral_services added successfully!")
            print_funeral_services()  # Update the funeral_services listbox after adding a new funeral_services
            add_funeral_services_window.destroy()

        tk.Button(add_funeral_services_window, text="Save funeral_services", command=save_funeral_services).pack(pady=20)


    def edit_funeral_services():
        selected_index = funeral_services_list.curselection()
        if selected_index:
            selected_funeral_services = profile['funeral_services'][selected_index[0]]
            edit_funeral_services_window = tk.Toplevel()
            edit_funeral_services_window.title("Edit funeral_services")

            tk.Label(edit_funeral_services_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_funeral_services_window)
            name_entry_edit.insert(0, selected_funeral_services['name'])
            name_entry_edit.pack()

            tk.Label(edit_funeral_services_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_funeral_services_window)
            email_entry_edit.insert(0, selected_funeral_services.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_funeral_services_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_funeral_services_window)
            phone_entry_edit.insert(0, selected_funeral_services.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_funeral_services['name'] = name_entry_edit.get()
                selected_funeral_services['email'] = email_entry_edit.get()
                selected_funeral_services['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "funeral_services updated successfully!")
                print_funeral_services()  # Update the funeral_services listbox after editing a funeral_services
                edit_funeral_services_window.destroy()

            tk.Button(edit_funeral_services_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No funeral_services Selected", "Please select a funeral_services to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'funeral_services':
                    continue  # Skip printing funeral_services here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print funeral_services information
            c.drawString(100, y_position, "funeral_services:")
            y_position -= 20
            for funeral_services in profile.get('funeral_services', []):
                funeral_services_info = f"Name: {funeral_services['name']}, Email: {funeral_services.get('email', '')}, Phone: {funeral_services.get('phone', '')}"
                c.drawString(100, y_position, funeral_services_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(funeral_services_window, text="Add funeral_services", command=add_funeral_services).pack(pady=5)
    tk.Button(funeral_services_window, text="Edit funeral_services", command=edit_funeral_services).pack(pady=5)
    tk.Button(funeral_services_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_funeral_services()


def open_obituary_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    obituary_window = tk.Toplevel()
    obituary_window.title(f"obituary for Profile: {profile_name}")

    obituary_list = tk.Listbox(obituary_window, width=50, height=20)
    obituary_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(obituary_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    obituary_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=obituary_list.yview)

    def print_obituary():
        obituary_list.delete(0, tk.END)
        for obituary in profile.get('obituary', []):
            obituary_info = f"Name: {obituary['name']}, Email: {obituary.get('email', '')}, Phone: {obituary.get('phone', '')}"
            obituary_list.insert(tk.END, obituary_info)

    def add_obituary():
        add_obituary_window = tk.Toplevel()
        add_obituary_window.title("Add obituary")

        tk.Label(add_obituary_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_obituary_window)
        name_entry.pack()

        tk.Label(add_obituary_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_obituary_window)
        email_entry.pack()

        tk.Label(add_obituary_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_obituary_window)
        phone_entry.pack()

        def save_obituary():
            if 'obituary' not in profile:
                profile['obituary'] = []  # Initialize 'obituary' list if it doesn't exist
            obituary = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['obituary'].append(obituary)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "obituary added successfully!")
            print_obituary()  # Update the obituary listbox after adding a new obituary
            add_obituary_window.destroy()

        tk.Button(add_obituary_window, text="Save obituary", command=save_obituary).pack(pady=20)


    def edit_obituary():
        selected_index = obituary_list.curselection()
        if selected_index:
            selected_obituary = profile['obituary'][selected_index[0]]
            edit_obituary_window = tk.Toplevel()
            edit_obituary_window.title("Edit obituary")

            tk.Label(edit_obituary_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_obituary_window)
            name_entry_edit.insert(0, selected_obituary['name'])
            name_entry_edit.pack()

            tk.Label(edit_obituary_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_obituary_window)
            email_entry_edit.insert(0, selected_obituary.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_obituary_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_obituary_window)
            phone_entry_edit.insert(0, selected_obituary.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_obituary['name'] = name_entry_edit.get()
                selected_obituary['email'] = email_entry_edit.get()
                selected_obituary['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "obituary updated successfully!")
                print_obituary()  # Update the obituary listbox after editing a obituary
                edit_obituary_window.destroy()

            tk.Button(edit_obituary_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No obituary Selected", "Please select a obituary to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'obituary':
                    continue  # Skip printing obituary here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print obituary information
            c.drawString(100, y_position, "obituary:")
            y_position -= 20
            for obituary in profile.get('obituary', []):
                obituary_info = f"Name: {obituary['name']}, Email: {obituary.get('email', '')}, Phone: {obituary.get('phone', '')}"
                c.drawString(100, y_position, obituary_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(obituary_window, text="Add obituary", command=add_obituary).pack(pady=5)
    tk.Button(obituary_window, text="Edit obituary", command=edit_obituary).pack(pady=5)
    tk.Button(obituary_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_obituary()

def open_will_and_trust_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    will_and_trust_window = tk.Toplevel()
    will_and_trust_window.title(f"will_and_trust for Profile: {profile_name}")

    will_and_trust_list = tk.Listbox(will_and_trust_window, width=50, height=20)
    will_and_trust_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(will_and_trust_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    will_and_trust_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=will_and_trust_list.yview)

    def print_will_and_trust():
        will_and_trust_list.delete(0, tk.END)
        for will_and_trust in profile.get('will_and_trust', []):
            will_and_trust_info = f"Name: {will_and_trust['name']}, Email: {will_and_trust.get('email', '')}, Phone: {will_and_trust.get('phone', '')}"
            will_and_trust_list.insert(tk.END, will_and_trust_info)

    def add_will_and_trust():
        add_will_and_trust_window = tk.Toplevel()
        add_will_and_trust_window.title("Add will_and_trust")

        tk.Label(add_will_and_trust_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_will_and_trust_window)
        name_entry.pack()

        tk.Label(add_will_and_trust_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_will_and_trust_window)
        email_entry.pack()

        tk.Label(add_will_and_trust_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_will_and_trust_window)
        phone_entry.pack()

        def save_will_and_trust():
            if 'will_and_trust' not in profile:
                profile['will_and_trust'] = []  # Initialize 'will_and_trust' list if it doesn't exist
            will_and_trust = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['will_and_trust'].append(will_and_trust)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "will_and_trust added successfully!")
            print_will_and_trust()  # Update the will_and_trust listbox after adding a new will_and_trust
            add_will_and_trust_window.destroy()

        tk.Button(add_will_and_trust_window, text="Save will_and_trust", command=save_will_and_trust).pack(pady=20)


    def edit_will_and_trust():
        selected_index = will_and_trust_list.curselection()
        if selected_index:
            selected_will_and_trust = profile['will_and_trust'][selected_index[0]]
            edit_will_and_trust_window = tk.Toplevel()
            edit_will_and_trust_window.title("Edit will_and_trust")

            tk.Label(edit_will_and_trust_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_will_and_trust_window)
            name_entry_edit.insert(0, selected_will_and_trust['name'])
            name_entry_edit.pack()

            tk.Label(edit_will_and_trust_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_will_and_trust_window)
            email_entry_edit.insert(0, selected_will_and_trust.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_will_and_trust_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_will_and_trust_window)
            phone_entry_edit.insert(0, selected_will_and_trust.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_will_and_trust['name'] = name_entry_edit.get()
                selected_will_and_trust['email'] = email_entry_edit.get()
                selected_will_and_trust['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "will_and_trust updated successfully!")
                print_will_and_trust()  # Update the will_and_trust listbox after editing a will_and_trust
                edit_will_and_trust_window.destroy()

            tk.Button(edit_will_and_trust_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No will_and_trust Selected", "Please select a will_and_trust to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'will_and_trust':
                    continue  # Skip printing will_and_trust here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print will_and_trust information
            c.drawString(100, y_position, "will_and_trust:")
            y_position -= 20
            for will_and_trust in profile.get('will_and_trust', []):
                will_and_trust_info = f"Name: {will_and_trust['name']}, Email: {will_and_trust.get('email', '')}, Phone: {will_and_trust.get('phone', '')}"
                c.drawString(100, y_position, will_and_trust_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(will_and_trust_window, text="Add will_and_trust", command=add_will_and_trust).pack(pady=5)
    tk.Button(will_and_trust_window, text="Edit will_and_trust", command=edit_will_and_trust).pack(pady=5)
    tk.Button(will_and_trust_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_will_and_trust()


def open_retirement_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    retirement_window = tk.Toplevel()
    retirement_window.title(f"retirement for Profile: {profile_name}")

    retirement_list = tk.Listbox(retirement_window, width=50, height=20)
    retirement_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(retirement_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    retirement_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=retirement_list.yview)

    def print_retirement():
        retirement_list.delete(0, tk.END)
        for retirement in profile.get('retirement', []):
            retirement_info = f"Name: {retirement['name']}, Email: {retirement.get('email', '')}, Phone: {retirement.get('phone', '')}"
            retirement_list.insert(tk.END, retirement_info)

    def add_retirement():
        add_retirement_window = tk.Toplevel()
        add_retirement_window.title("Add retirement")

        tk.Label(add_retirement_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_retirement_window)
        name_entry.pack()

        tk.Label(add_retirement_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_retirement_window)
        email_entry.pack()

        tk.Label(add_retirement_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_retirement_window)
        phone_entry.pack()

        def save_retirement():
            if 'retirement' not in profile:
                profile['retirement'] = []  # Initialize 'retirement' list if it doesn't exist
            retirement = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['retirement'].append(retirement)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "retirement added successfully!")
            print_retirement()  # Update the retirement listbox after adding a new retirement
            add_retirement_window.destroy()

        tk.Button(add_retirement_window, text="Save retirement", command=save_retirement).pack(pady=20)


    def edit_retirement():
        selected_index = retirement_list.curselection()
        if selected_index:
            selected_retirement = profile['retirement'][selected_index[0]]
            edit_retirement_window = tk.Toplevel()
            edit_retirement_window.title("Edit retirement")

            tk.Label(edit_retirement_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_retirement_window)
            name_entry_edit.insert(0, selected_retirement['name'])
            name_entry_edit.pack()

            tk.Label(edit_retirement_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_retirement_window)
            email_entry_edit.insert(0, selected_retirement.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_retirement_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_retirement_window)
            phone_entry_edit.insert(0, selected_retirement.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_retirement['name'] = name_entry_edit.get()
                selected_retirement['email'] = email_entry_edit.get()
                selected_retirement['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "retirement updated successfully!")
                print_retirement()  # Update the retirement listbox after editing a retirement
                edit_retirement_window.destroy()

            tk.Button(edit_retirement_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No retirement Selected", "Please select a retirement to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'retirement':
                    continue  # Skip printing retirement here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print retirement information
            c.drawString(100, y_position, "retirement:")
            y_position -= 20
            for retirement in profile.get('retirement', []):
                retirement_info = f"Name: {retirement['name']}, Email: {retirement.get('email', '')}, Phone: {retirement.get('phone', '')}"
                c.drawString(100, y_position, retirement_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(retirement_window, text="Add retirement", command=add_retirement).pack(pady=5)
    tk.Button(retirement_window, text="Edit retirement", command=edit_retirement).pack(pady=5)
    tk.Button(retirement_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_retirement()


def open_benefits_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    benefits_window = tk.Toplevel()
    benefits_window.title(f"benefits for Profile: {profile_name}")

    benefits_list = tk.Listbox(benefits_window, width=50, height=20)
    benefits_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(benefits_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    benefits_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=benefits_list.yview)

    def print_benefits():
        benefits_list.delete(0, tk.END)
        for benefits in profile.get('benefits', []):
            benefits_info = f"Name: {benefits['name']}, Email: {benefits.get('email', '')}, Phone: {benefits.get('phone', '')}"
            benefits_list.insert(tk.END, benefits_info)

    def add_benefits():
        add_benefits_window = tk.Toplevel()
        add_benefits_window.title("Add benefits")

        tk.Label(add_benefits_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_benefits_window)
        name_entry.pack()

        tk.Label(add_benefits_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_benefits_window)
        email_entry.pack()

        tk.Label(add_benefits_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_benefits_window)
        phone_entry.pack()

        def save_benefits():
            if 'benefits' not in profile:
                profile['benefits'] = []  # Initialize 'benefits' list if it doesn't exist
            benefits = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['benefits'].append(benefits)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "benefits added successfully!")
            print_benefits()  # Update the benefits listbox after adding a new benefits
            add_benefits_window.destroy()

        tk.Button(add_benefits_window, text="Save benefits", command=save_benefits).pack(pady=20)


    def edit_benefits():
        selected_index = benefits_list.curselection()
        if selected_index:
            selected_benefits = profile['benefits'][selected_index[0]]
            edit_benefits_window = tk.Toplevel()
            edit_benefits_window.title("Edit benefits")

            tk.Label(edit_benefits_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_benefits_window)
            name_entry_edit.insert(0, selected_benefits['name'])
            name_entry_edit.pack()

            tk.Label(edit_benefits_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_benefits_window)
            email_entry_edit.insert(0, selected_benefits.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_benefits_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_benefits_window)
            phone_entry_edit.insert(0, selected_benefits.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_benefits['name'] = name_entry_edit.get()
                selected_benefits['email'] = email_entry_edit.get()
                selected_benefits['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "benefits updated successfully!")
                print_benefits()  # Update the benefits listbox after editing a benefits
                edit_benefits_window.destroy()

            tk.Button(edit_benefits_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No benefits Selected", "Please select a benefits to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'benefits':
                    continue  # Skip printing benefits here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print benefits information
            c.drawString(100, y_position, "benefits:")
            y_position -= 20
            for benefits in profile.get('benefits', []):
                benefits_info = f"Name: {benefits['name']}, Email: {benefits.get('email', '')}, Phone: {benefits.get('phone', '')}"
                c.drawString(100, y_position, benefits_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(benefits_window, text="Add benefits", command=add_benefits).pack(pady=5)
    tk.Button(benefits_window, text="Edit benefits", command=edit_benefits).pack(pady=5)
    tk.Button(benefits_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_benefits()


def open_benefits_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    benefits_window = tk.Toplevel()
    benefits_window.title(f"benefits for Profile: {profile_name}")

    benefits_list = tk.Listbox(benefits_window, width=50, height=20)
    benefits_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(benefits_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    benefits_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=benefits_list.yview)

    def print_benefits():
        benefits_list.delete(0, tk.END)
        for benefits in profile.get('benefits', []):
            benefits_info = f"Name: {benefits['name']}, Email: {benefits.get('email', '')}, Phone: {benefits.get('phone', '')}"
            benefits_list.insert(tk.END, benefits_info)

    def add_benefits():
        add_benefits_window = tk.Toplevel()
        add_benefits_window.title("Add benefits")

        tk.Label(add_benefits_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_benefits_window)
        name_entry.pack()

        tk.Label(add_benefits_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_benefits_window)
        email_entry.pack()

        tk.Label(add_benefits_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_benefits_window)
        phone_entry.pack()

        def save_benefits():
            if 'benefits' not in profile:
                profile['benefits'] = []  # Initialize 'benefits' list if it doesn't exist
            benefits = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['benefits'].append(benefits)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "benefits added successfully!")
            print_benefits()  # Update the benefits listbox after adding a new benefits
            add_benefits_window.destroy()

        tk.Button(add_benefits_window, text="Save benefits", command=save_benefits).pack(pady=20)


    def edit_benefits():
        selected_index = benefits_list.curselection()
        if selected_index:
            selected_benefits = profile['benefits'][selected_index[0]]
            edit_benefits_window = tk.Toplevel()
            edit_benefits_window.title("Edit benefits")

            tk.Label(edit_benefits_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_benefits_window)
            name_entry_edit.insert(0, selected_benefits['name'])
            name_entry_edit.pack()

            tk.Label(edit_benefits_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_benefits_window)
            email_entry_edit.insert(0, selected_benefits.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_benefits_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_benefits_window)
            phone_entry_edit.insert(0, selected_benefits.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_benefits['name'] = name_entry_edit.get()
                selected_benefits['email'] = email_entry_edit.get()
                selected_benefits['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "benefits updated successfully!")
                print_benefits()  # Update the benefits listbox after editing a benefits
                edit_benefits_window.destroy()

            tk.Button(edit_benefits_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No benefits Selected", "Please select a benefits to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'benefits':
                    continue  # Skip printing benefits here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print benefits information
            c.drawString(100, y_position, "benefits:")
            y_position -= 20
            for benefits in profile.get('benefits', []):
                benefits_info = f"Name: {benefits['name']}, Email: {benefits.get('email', '')}, Phone: {benefits.get('phone', '')}"
                c.drawString(100, y_position, benefits_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(benefits_window, text="Add benefits", command=add_benefits).pack(pady=5)
    tk.Button(benefits_window, text="Edit benefits", command=edit_benefits).pack(pady=5)
    tk.Button(benefits_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_benefits()

def open_secured_places_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    secured_places_window = tk.Toplevel()
    secured_places_window.title(f"secured_places for Profile: {profile_name}")

    secured_places_list = tk.Listbox(secured_places_window, width=50, height=20)
    secured_places_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(secured_places_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    secured_places_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=secured_places_list.yview)

    def print_secured_places():
        secured_places_list.delete(0, tk.END)
        for secured_places in profile.get('secured_places', []):
            secured_places_info = f"Name: {secured_places['name']}, Email: {secured_places.get('email', '')}, Phone: {secured_places.get('phone', '')}"
            secured_places_list.insert(tk.END, secured_places_info)

    def add_secured_places():
        add_secured_places_window = tk.Toplevel()
        add_secured_places_window.title("Add secured_places")

        tk.Label(add_secured_places_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_secured_places_window)
        name_entry.pack()

        tk.Label(add_secured_places_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_secured_places_window)
        email_entry.pack()

        tk.Label(add_secured_places_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_secured_places_window)
        phone_entry.pack()

        def save_secured_places():
            if 'secured_places' not in profile:
                profile['secured_places'] = []  # Initialize 'secured_places' list if it doesn't exist
            secured_places = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['secured_places'].append(secured_places)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "secured_places added successfully!")
            print_secured_places()  # Update the secured_places listbox after adding a new secured_places
            add_secured_places_window.destroy()

        tk.Button(add_secured_places_window, text="Save secured_places", command=save_secured_places).pack(pady=20)


    def edit_secured_places():
        selected_index = secured_places_list.curselection()
        if selected_index:
            selected_secured_places = profile['secured_places'][selected_index[0]]
            edit_secured_places_window = tk.Toplevel()
            edit_secured_places_window.title("Edit secured_places")

            tk.Label(edit_secured_places_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_secured_places_window)
            name_entry_edit.insert(0, selected_secured_places['name'])
            name_entry_edit.pack()

            tk.Label(edit_secured_places_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_secured_places_window)
            email_entry_edit.insert(0, selected_secured_places.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_secured_places_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_secured_places_window)
            phone_entry_edit.insert(0, selected_secured_places.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_secured_places['name'] = name_entry_edit.get()
                selected_secured_places['email'] = email_entry_edit.get()
                selected_secured_places['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "secured_places updated successfully!")
                print_secured_places()  # Update the secured_places listbox after editing a secured_places
                edit_secured_places_window.destroy()

            tk.Button(edit_secured_places_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No secured_places Selected", "Please select a secured_places to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'secured_places':
                    continue  # Skip printing secured_places here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print secured_places information
            c.drawString(100, y_position, "secured_places:")
            y_position -= 20
            for secured_places in profile.get('secured_places', []):
                secured_places_info = f"Name: {secured_places['name']}, Email: {secured_places.get('email', '')}, Phone: {secured_places.get('phone', '')}"
                c.drawString(100, y_position, secured_places_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(secured_places_window, text="Add secured_places", command=add_secured_places).pack(pady=5)
    tk.Button(secured_places_window, text="Edit secured_places", command=edit_secured_places).pack(pady=5)
    tk.Button(secured_places_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_secured_places()

def open_taxes_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    taxes_window = tk.Toplevel()
    taxes_window.title(f"taxes for Profile: {profile_name}")

    taxes_list = tk.Listbox(taxes_window, width=50, height=20)
    taxes_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(taxes_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    taxes_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=taxes_list.yview)

    def print_taxes():
        taxes_list.delete(0, tk.END)
        for taxes in profile.get('taxes', []):
            taxes_info = f"Name: {taxes['name']}, Email: {taxes.get('email', '')}, Phone: {taxes.get('phone', '')}"
            taxes_list.insert(tk.END, taxes_info)

    def add_taxes():
        add_taxes_window = tk.Toplevel()
        add_taxes_window.title("Add taxes")

        tk.Label(add_taxes_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_taxes_window)
        name_entry.pack()

        tk.Label(add_taxes_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_taxes_window)
        email_entry.pack()

        tk.Label(add_taxes_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_taxes_window)
        phone_entry.pack()

        def save_taxes():
            if 'taxes' not in profile:
                profile['taxes'] = []  # Initialize 'taxes' list if it doesn't exist
            taxes = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['taxes'].append(taxes)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "taxes added successfully!")
            print_taxes()  # Update the taxes listbox after adding a new taxes
            add_taxes_window.destroy()

        tk.Button(add_taxes_window, text="Save taxes", command=save_taxes).pack(pady=20)


    def edit_taxes():
        selected_index = taxes_list.curselection()
        if selected_index:
            selected_taxes = profile['taxes'][selected_index[0]]
            edit_taxes_window = tk.Toplevel()
            edit_taxes_window.title("Edit taxes")

            tk.Label(edit_taxes_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_taxes_window)
            name_entry_edit.insert(0, selected_taxes['name'])
            name_entry_edit.pack()

            tk.Label(edit_taxes_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_taxes_window)
            email_entry_edit.insert(0, selected_taxes.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_taxes_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_taxes_window)
            phone_entry_edit.insert(0, selected_taxes.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_taxes['name'] = name_entry_edit.get()
                selected_taxes['email'] = email_entry_edit.get()
                selected_taxes['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "taxes updated successfully!")
                print_taxes()  # Update the taxes listbox after editing a taxes
                edit_taxes_window.destroy()

            tk.Button(edit_taxes_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No taxes Selected", "Please select a taxes to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'taxes':
                    continue  # Skip printing taxes here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print taxes information
            c.drawString(100, y_position, "taxes:")
            y_position -= 20
            for taxes in profile.get('taxes', []):
                taxes_info = f"Name: {taxes['name']}, Email: {taxes.get('email', '')}, Phone: {taxes.get('phone', '')}"
                c.drawString(100, y_position, taxes_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(taxes_window, text="Add taxes", command=add_taxes).pack(pady=5)
    tk.Button(taxes_window, text="Edit taxes", command=edit_taxes).pack(pady=5)
    tk.Button(taxes_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_taxes()

def open_other_property_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    other_property_window = tk.Toplevel()
    other_property_window.title(f"other_property for Profile: {profile_name}")

    other_property_list = tk.Listbox(other_property_window, width=50, height=20)
    other_property_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(other_property_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    other_property_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=other_property_list.yview)

    def print_other_property():
        other_property_list.delete(0, tk.END)
        for other_property in profile.get('other_property', []):
            other_property_info = f"Name: {other_property['name']}, Email: {other_property.get('email', '')}, Phone: {other_property.get('phone', '')}"
            other_property_list.insert(tk.END, other_property_info)

    def add_other_property():
        add_other_property_window = tk.Toplevel()
        add_other_property_window.title("Add other_property")

        tk.Label(add_other_property_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_other_property_window)
        name_entry.pack()

        tk.Label(add_other_property_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_other_property_window)
        email_entry.pack()

        tk.Label(add_other_property_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_other_property_window)
        phone_entry.pack()

        def save_other_property():
            if 'other_property' not in profile:
                profile['other_property'] = []  # Initialize 'other_property' list if it doesn't exist
            other_property = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['other_property'].append(other_property)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "other_property added successfully!")
            print_other_property()  # Update the other_property listbox after adding a new other_property
            add_other_property_window.destroy()

        tk.Button(add_other_property_window, text="Save other_property", command=save_other_property).pack(pady=20)


    def edit_other_property():
        selected_index = other_property_list.curselection()
        if selected_index:
            selected_other_property = profile['other_property'][selected_index[0]]
            edit_other_property_window = tk.Toplevel()
            edit_other_property_window.title("Edit other_property")

            tk.Label(edit_other_property_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_other_property_window)
            name_entry_edit.insert(0, selected_other_property['name'])
            name_entry_edit.pack()

            tk.Label(edit_other_property_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_other_property_window)
            email_entry_edit.insert(0, selected_other_property.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_other_property_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_other_property_window)
            phone_entry_edit.insert(0, selected_other_property.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_other_property['name'] = name_entry_edit.get()
                selected_other_property['email'] = email_entry_edit.get()
                selected_other_property['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "other_property updated successfully!")
                print_other_property()  # Update the other_property listbox after editing a other_property
                edit_other_property_window.destroy()

            tk.Button(edit_other_property_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No other_property Selected", "Please select a other_property to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'other_property':
                    continue  # Skip printing other_property here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print other_property information
            c.drawString(100, y_position, "other_property:")
            y_position -= 20
            for other_property in profile.get('other_property', []):
                other_property_info = f"Name: {other_property['name']}, Email: {other_property.get('email', '')}, Phone: {other_property.get('phone', '')}"
                c.drawString(100, y_position, other_property_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(other_property_window, text="Add other_property", command=add_other_property).pack(pady=5)
    tk.Button(other_property_window, text="Edit other_property", command=edit_other_property).pack(pady=5)
    tk.Button(other_property_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_other_property()


def open_organ_body_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    organ_body_window = tk.Toplevel()
    organ_body_window.title(f"organ_body for Profile: {profile_name}")

    organ_body_list = tk.Listbox(organ_body_window, width=50, height=20)
    organ_body_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(organ_body_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    organ_body_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=organ_body_list.yview)

    def print_organ_body():
        organ_body_list.delete(0, tk.END)
        for organ_body in profile.get('organ_body', []):
            organ_body_info = f"Name: {organ_body['name']}, Email: {organ_body.get('email', '')}, Phone: {organ_body.get('phone', '')}"
            organ_body_list.insert(tk.END, organ_body_info)

    def add_organ_body():
        add_organ_body_window = tk.Toplevel()
        add_organ_body_window.title("Add organ_body")

        tk.Label(add_organ_body_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_organ_body_window)
        name_entry.pack()

        tk.Label(add_organ_body_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_organ_body_window)
        email_entry.pack()

        tk.Label(add_organ_body_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_organ_body_window)
        phone_entry.pack()

        def save_organ_body():
            if 'organ_body' not in profile:
                profile['organ_body'] = []  # Initialize 'organ_body' list if it doesn't exist
            organ_body = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['organ_body'].append(organ_body)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "organ_body added successfully!")
            print_organ_body()  # Update the organ_body listbox after adding a new organ_body
            add_organ_body_window.destroy()

        tk.Button(add_organ_body_window, text="Save organ_body", command=save_organ_body).pack(pady=20)


    def edit_organ_body():
        selected_index = organ_body_list.curselection()
        if selected_index:
            selected_organ_body = profile['organ_body'][selected_index[0]]
            edit_organ_body_window = tk.Toplevel()
            edit_organ_body_window.title("Edit organ_body")

            tk.Label(edit_organ_body_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_organ_body_window)
            name_entry_edit.insert(0, selected_organ_body['name'])
            name_entry_edit.pack()

            tk.Label(edit_organ_body_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_organ_body_window)
            email_entry_edit.insert(0, selected_organ_body.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_organ_body_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_organ_body_window)
            phone_entry_edit.insert(0, selected_organ_body.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_organ_body['name'] = name_entry_edit.get()
                selected_organ_body['email'] = email_entry_edit.get()
                selected_organ_body['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "organ_body updated successfully!")
                print_organ_body()  # Update the organ_body listbox after editing a organ_body
                edit_organ_body_window.destroy()

            tk.Button(edit_organ_body_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No organ_body Selected", "Please select a organ_body to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'organ_body':
                    continue  # Skip printing organ_body here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print organ_body information
            c.drawString(100, y_position, "organ_body:")
            y_position -= 20
            for organ_body in profile.get('organ_body', []):
                organ_body_info = f"Name: {organ_body['name']}, Email: {organ_body.get('email', '')}, Phone: {organ_body.get('phone', '')}"
                c.drawString(100, y_position, organ_body_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(organ_body_window, text="Add organ_body", command=add_organ_body).pack(pady=5)
    tk.Button(organ_body_window, text="Edit organ_body", command=edit_organ_body).pack(pady=5)
    tk.Button(organ_body_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_organ_body()

def open_other_info_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    other_info_window = tk.Toplevel()
    other_info_window.title(f"other_info for Profile: {profile_name}")

    other_info_list = tk.Listbox(other_info_window, width=50, height=20)
    other_info_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(other_info_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    other_info_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=other_info_list.yview)

    def print_other_info():
        other_info_list.delete(0, tk.END)
        for other_info in profile.get('other_info', []):
            other_info_info = f"Name: {other_info['name']}, Email: {other_info.get('email', '')}, Phone: {other_info.get('phone', '')}"
            other_info_list.insert(tk.END, other_info_info)

    def add_other_info():
        add_other_info_window = tk.Toplevel()
        add_other_info_window.title("Add other_info")

        tk.Label(add_other_info_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_other_info_window)
        name_entry.pack()

        tk.Label(add_other_info_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_other_info_window)
        email_entry.pack()

        tk.Label(add_other_info_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_other_info_window)
        phone_entry.pack()

        def save_other_info():
            if 'other_info' not in profile:
                profile['other_info'] = []  # Initialize 'other_info' list if it doesn't exist
            other_info = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['other_info'].append(other_info)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "other_info added successfully!")
            print_other_info()  # Update the other_info listbox after adding a new other_info
            add_other_info_window.destroy()

        tk.Button(add_other_info_window, text="Save other_info", command=save_other_info).pack(pady=20)


    def edit_other_info():
        selected_index = other_info_list.curselection()
        if selected_index:
            selected_other_info = profile['other_info'][selected_index[0]]
            edit_other_info_window = tk.Toplevel()
            edit_other_info_window.title("Edit other_info")

            tk.Label(edit_other_info_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_other_info_window)
            name_entry_edit.insert(0, selected_other_info['name'])
            name_entry_edit.pack()

            tk.Label(edit_other_info_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_other_info_window)
            email_entry_edit.insert(0, selected_other_info.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_other_info_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_other_info_window)
            phone_entry_edit.insert(0, selected_other_info.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_other_info['name'] = name_entry_edit.get()
                selected_other_info['email'] = email_entry_edit.get()
                selected_other_info['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "other_info updated successfully!")
                print_other_info()  # Update the other_info listbox after editing a other_info
                edit_other_info_window.destroy()

            tk.Button(edit_other_info_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No other_info Selected", "Please select a other_info to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'other_info':
                    continue  # Skip printing other_info here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print other_info information
            c.drawString(100, y_position, "other_info:")
            y_position -= 20
            for other_info in profile.get('other_info', []):
                other_info_info = f"Name: {other_info['name']}, Email: {other_info.get('email', '')}, Phone: {other_info.get('phone', '')}"
                c.drawString(100, y_position, other_info_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(other_info_window, text="Add other_info", command=add_other_info).pack(pady=5)
    tk.Button(other_info_window, text="Edit other_info", command=edit_other_info).pack(pady=5)
    tk.Button(other_info_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_other_info()

def open_real_estate_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    real_estate_window = tk.Toplevel()
    real_estate_window.title(f"real_estate for Profile: {profile_name}")

    real_estate_list = tk.Listbox(real_estate_window, width=50, height=20)
    real_estate_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(real_estate_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    real_estate_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=real_estate_list.yview)

    def print_real_estate():
        real_estate_list.delete(0, tk.END)
        for real_estate in profile.get('real_estate', []):
            real_estate_info = f"Name: {real_estate['name']}, Email: {real_estate.get('email', '')}, Phone: {real_estate.get('phone', '')}"
            real_estate_list.insert(tk.END, real_estate_info)

    def add_real_estate():
        add_real_estate_window = tk.Toplevel()
        add_real_estate_window.title("Add real_estate")

        tk.Label(add_real_estate_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_real_estate_window)
        name_entry.pack()

        tk.Label(add_real_estate_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_real_estate_window)
        email_entry.pack()

        tk.Label(add_real_estate_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_real_estate_window)
        phone_entry.pack()

        def save_real_estate():
            if 'real_estate' not in profile:
                profile['real_estate'] = []  # Initialize 'real_estate' list if it doesn't exist
            real_estate = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['real_estate'].append(real_estate)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "real_estate added successfully!")
            print_real_estate()  # Update the real_estate listbox after adding a new real_estate
            add_real_estate_window.destroy()

        tk.Button(add_real_estate_window, text="Save real_estate", command=save_real_estate).pack(pady=20)


    def edit_real_estate():
        selected_index = real_estate_list.curselection()
        if selected_index:
            selected_real_estate = profile['real_estate'][selected_index[0]]
            edit_real_estate_window = tk.Toplevel()
            edit_real_estate_window.title("Edit real_estate")

            tk.Label(edit_real_estate_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_real_estate_window)
            name_entry_edit.insert(0, selected_real_estate['name'])
            name_entry_edit.pack()

            tk.Label(edit_real_estate_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_real_estate_window)
            email_entry_edit.insert(0, selected_real_estate.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_real_estate_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_real_estate_window)
            phone_entry_edit.insert(0, selected_real_estate.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_real_estate['name'] = name_entry_edit.get()
                selected_real_estate['email'] = email_entry_edit.get()
                selected_real_estate['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "real_estate updated successfully!")
                print_real_estate()  # Update the real_estate listbox after editing a real_estate
                edit_real_estate_window.destroy()

            tk.Button(edit_real_estate_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No real_estate Selected", "Please select a real_estate to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'real_estate':
                    continue  # Skip printing real_estate here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print real_estate information
            c.drawString(100, y_position, "real_estate:")
            y_position -= 20
            for real_estate in profile.get('real_estate', []):
                real_estate_info = f"Name: {real_estate['name']}, Email: {real_estate.get('email', '')}, Phone: {real_estate.get('phone', '')}"
                c.drawString(100, y_position, real_estate_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(real_estate_window, text="Add real_estate", command=add_real_estate).pack(pady=5)
    tk.Button(real_estate_window, text="Edit real_estate", command=edit_real_estate).pack(pady=5)
    tk.Button(real_estate_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_real_estate()

def open_credit_debts_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    credit_debts_window = tk.Toplevel()
    credit_debts_window.title(f"credit_debts for Profile: {profile_name}")

    credit_debts_list = tk.Listbox(credit_debts_window, width=50, height=20)
    credit_debts_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(credit_debts_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    credit_debts_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=credit_debts_list.yview)

    def print_credit_debts():
        credit_debts_list.delete(0, tk.END)
        for credit_debts in profile.get('credit_debts', []):
            credit_debts_info = f"Name: {credit_debts['name']}, Email: {credit_debts.get('email', '')}, Phone: {credit_debts.get('phone', '')}"
            credit_debts_list.insert(tk.END, credit_debts_info)

    def add_credit_debts():
        add_credit_debts_window = tk.Toplevel()
        add_credit_debts_window.title("Add credit_debts")

        tk.Label(add_credit_debts_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_credit_debts_window)
        name_entry.pack()

        tk.Label(add_credit_debts_window, text="Email Address:").pack(pady=10)
        email_entry = tk.Entry(add_credit_debts_window)
        email_entry.pack()

        tk.Label(add_credit_debts_window, text="Phone Number:").pack(pady=10)
        phone_entry = tk.Entry(add_credit_debts_window)
        phone_entry.pack()

        def save_credit_debts():
            if 'credit_debts' not in profile:
                profile['credit_debts'] = []  # Initialize 'credit_debts' list if it doesn't exist
            credit_debts = {
                'name': name_entry.get(),
                'email': email_entry.get(),
                'phone': phone_entry.get()
            }
            profile['credit_debts'].append(credit_debts)
            save_to_json(profiles, PROFILES_FILE)
            messagebox.showinfo("Success", "credit_debts added successfully!")
            print_credit_debts()  # Update the credit_debts listbox after adding a new credit_debts
            add_credit_debts_window.destroy()

        tk.Button(add_credit_debts_window, text="Save credit_debts", command=save_credit_debts).pack(pady=20)


    def edit_credit_debts():
        selected_index = credit_debts_list.curselection()
        if selected_index:
            selected_credit_debts = profile['credit_debts'][selected_index[0]]
            edit_credit_debts_window = tk.Toplevel()
            edit_credit_debts_window.title("Edit credit_debts")

            tk.Label(edit_credit_debts_window, text="Name:").pack(pady=10)
            name_entry_edit = tk.Entry(edit_credit_debts_window)
            name_entry_edit.insert(0, selected_credit_debts['name'])
            name_entry_edit.pack()

            tk.Label(edit_credit_debts_window, text="Email Address:").pack(pady=10)
            email_entry_edit = tk.Entry(edit_credit_debts_window)
            email_entry_edit.insert(0, selected_credit_debts.get('email', ''))
            email_entry_edit.pack()

            tk.Label(edit_credit_debts_window, text="Phone Number:").pack(pady=10)
            phone_entry_edit = tk.Entry(edit_credit_debts_window)
            phone_entry_edit.insert(0, selected_credit_debts.get('phone', ''))
            phone_entry_edit.pack()

            def save_changes():
                selected_credit_debts['name'] = name_entry_edit.get()
                selected_credit_debts['email'] = email_entry_edit.get()
                selected_credit_debts['phone'] = phone_entry_edit.get()
                save_to_json(profiles, PROFILES_FILE)
                messagebox.showinfo("Success", "credit_debts updated successfully!")
                print_credit_debts()  # Update the credit_debts listbox after editing a credit_debts
                edit_credit_debts_window.destroy()

            tk.Button(edit_credit_debts_window, text="Save Changes", command=save_changes).pack(pady=20)
        else:
            messagebox.showwarning("No credit_debts Selected", "Please select a credit_debts to edit.")

    def generate_pdf():
        pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
        if pdf_filename:
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            c.drawString(100, 750, f"Profile Information for: {profile_name}")
            y_position = 720

            # Print profile details
            for key, value in profile.items():
                if key == 'credit_debts':
                    continue  # Skip printing credit_debts here
                if isinstance(value, list) or isinstance(value, dict):
                    value = json.dumps(value, indent=4)
                profile_info = f"{key}: {value}"
                c.drawString(100, y_position, profile_info)
                y_position -= 20

            # Print credit_debts information
            c.drawString(100, y_position, "credit_debts:")
            y_position -= 20
            for credit_debts in profile.get('credit_debts', []):
                credit_debts_info = f"Name: {credit_debts['name']}, Email: {credit_debts.get('email', '')}, Phone: {credit_debts.get('phone', '')}"
                c.drawString(100, y_position, credit_debts_info)
                y_position -= 20

            c.save()
            messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")

    tk.Button(credit_debts_window, text="Add credit_debts", command=add_credit_debts).pack(pady=5)
    tk.Button(credit_debts_window, text="Edit credit_debts", command=edit_credit_debts).pack(pady=5)
    tk.Button(credit_debts_window, text="Generate PDF", command=generate_pdf).pack(pady=5)
    
    print_credit_debts()


def generate_pdf_for_selected_profile():
    selected_index = profiles_listbox.curselection()
    if selected_index:
        selected_profile_name = profiles_listbox.get(selected_index[0])
        profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == selected_profile_name), None)
        if profile:
            pdf_filename = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF files", "*.pdf")])
            if pdf_filename:
                c = canvas.Canvas(pdf_filename, pagesize=letter)
                c.drawString(100, 750, f"Profile Information for: {selected_profile_name}")
                y_position = 720

                # Print profile details
                for key, value in profile.items():
                    if key == 'contacts':
                        continue  # Skip printing contacts here
                    if isinstance(value, list) or isinstance(value, dict):
                        value = json.dumps(value, indent=4)
                    profile_info = f"{key}: {value}"
                    c.drawString(100, y_position, profile_info)
                    y_position -= 20

                # Print contacts information
                c.drawString(100, y_position, "Contacts:")
                y_position -= 20
                for contact in profile.get('contacts', []):
                    contact_info = f"Name: {contact['name']}, Email: {contact.get('email', '')}, Phone: {contact.get('phone', '')}"
                    c.drawString(100, y_position, contact_info)
                    y_position -= 20

                c.save()
                messagebox.showinfo("PDF Generated", f"PDF generated successfully at {pdf_filename}")
        else:
            messagebox.showwarning("Profile Not Found", f"Profile '{selected_profile_name}' not found.")
    else:
        messagebox.showwarning("No Profile Selected", "Please select a profile to generate PDF.")

# Main Application Window
root = tk.Tk()
root.title("Profile Manager")

# Load profiles from file
profiles = load_from_json(PROFILES_FILE)

# Profiles Listbox
profiles_listbox = tk.Listbox(root, width=50, height=20)
profiles_listbox.pack(side=tk.LEFT, fill=tk.Y)

scrollbar = tk.Scrollbar(root)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

profiles_listbox.configure(yscrollcommand=scrollbar.set)
scrollbar.configure(command=profiles_listbox.yview)

# Populate Listbox with existing profiles
print_profiles()

# Buttons
tk.Button(root, text="Create Profile", command=lambda: create_profile_window(root)).pack(pady=5)
tk.Button(root, text="Delete Profile", command=delete_profile_window).pack(pady=5)
tk.Button(root, text="Generate PDF for Selected Profile", command=generate_pdf_for_selected_profile).pack(pady=5)
tk.Button(root, text="Open Contacts", command=lambda: open_contact_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open Children Info", command=lambda: open_children_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open Others Who Depend on Me Info", command=lambda: open_others_who_depend_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open Pets and Livestock Info", command=lambda: open_pets_and_livestock_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open Others Who Depend on Me Info", command=lambda: open_insurance_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open vehicles Who Depend on Me Info", command=lambda: open_vehicles_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open real estate Info", command=lambda: open_real_estate_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open Banking Info", command=lambda: open_banking_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open real estate Info", command=lambda: open_service_providers_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open Banking Info", command=lambda: open_banking_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open real estate Info", command=lambda: open_health_care_directives_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open Banking Info", command=lambda: open_banking_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open real estate Info", command=lambda: open_power_of_attorney_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open Banking Info", command=lambda: open_banking_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open real estate Info", command=lambda: open_organ_body_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)

tk.Button(root, text="Open real estate Info", command=lambda: open_burial_cremation_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)

tk.Button(root, text="Open real estate Info", command=lambda: open_funeral_services_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)

tk.Button(root, text="Open real estate Info", command=lambda: open_obituary_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)

tk.Button(root, text="Open real estate Info", command=lambda: open_will_and_trust_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)

tk.Button(root, text="Open real estate Info", command=lambda: open_insurance_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)

tk.Button(root, text="Open real estate Info", command=lambda: open_retirement_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open real estate Info", command=lambda: open_benefits_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)

tk.Button(root, text="Open real estate Info", command=lambda: open_secured_places_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open real estate Info", command=lambda: open_taxes_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open real estate Info", command=lambda: open_real_estate_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)

tk.Button(root, text="Open real estate Info", command=lambda: open_vehicles_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open real estate Info", command=lambda: open_other_property_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)
tk.Button(root, text="Open real estate Info", command=lambda: open_other_info_window(profiles_listbox.get(tk.ANCHOR))).pack(pady=5)



# Start the Tkinter event loop
root.mainloop()
