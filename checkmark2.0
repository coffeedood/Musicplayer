import tkinter as tk
from tkinter import messagebox
import json
import os

PROFILES_FILE = "profiles.json"
profiles = []

# Load images as text placeholders
CHECKMARK = "✔"
XMARK = "✘"

# Function to save data to JSON
def save_to_json(data, filename):
    try:
        with open(filename, 'w') as file:
            json.dump(data, file, indent=4)
    except IOError:
        messagebox.showerror("Error", "Could not save data to file.")

# Function to load data from JSON
def load_from_json(filename):
    if os.path.exists(filename):
        try:
            with open(filename, 'r') as file:
                data = json.load(file)
                if isinstance(data, list):
                    return [p for p in data if isinstance(p, dict)]
        except IOError:
            messagebox.showerror("Error", "Could not load data from file.")
    return []

# Load profiles from JSON on startup
profiles = load_from_json(PROFILES_FILE)

# Function to update status labels
def update_status_label(label, is_complete):
    label.config(text=CHECKMARK if is_complete else XMARK, fg="green" if is_complete else "red")

# Function to update the banking info label based on the profile
def update_banking_info_label(profile):
    if profile and 'banking_info' in profile and profile['banking_info']:
        update_status_label(banking_info_label, True)
    else:
        update_status_label(banking_info_label, False)

# Function to update the credit/debts label based on the profile
def update_credit_debts_label(profile):
    if profile and 'credit_debts' in profile and profile['credit_debts']:
        update_status_label(credit_debts_label, True)
    else:
        update_status_label(credit_debts_label, False)

# Function to update the vehicles label based on the profile
def update_vehicles_label(profile):
    if profile and 'vehicles' in profile and profile['vehicles']:
        update_status_label(vehicles_label, True)
    else:
        update_status_label(vehicles_label, False)

# Function to update the contacts label based on the profile
def update_contacts_label(profile):
    if profile and 'contacts' in profile and profile['contacts']:
        update_status_label(contacts_label, True)
    else:
        update_status_label(contacts_label, False)

# Function to update the documents label based on the profile
def update_documents_label(profile):
    if profile and 'documents' in profile and profile['documents']:
        update_status_label(documents_label, True)
    else:
        update_status_label(documents_label, False)

# Function to update the housing label based on the profile
def update_housing_label(profile):
    if profile and 'housing' in profile and profile['housing']:
        update_status_label(housing_label, True)
    else:
        update_status_label(housing_label, False)

# Function to open the window for managing documents
def open_documents_window(profile_name):
    profile = next((p for p in profiles if isinstance(p, dict) and p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    documents_window = tk.Toplevel()
    documents_window.title(f"Documents for Profile: {profile_name}")

    documents_list = tk.Listbox(documents_window, width=50, height=20)
    documents_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(documents_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    documents_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=documents_list.yview)

    def print_documents():
        documents_list.delete(0, tk.END)
        for document in profile.get('documents', []):
            document_info = f"Title: {document['title']}, Type: {document.get('type', 'N/A')}, Notes: {document.get('notes', 'N/A')}"
            documents_list.insert(tk.END, document_info)

    def add_document():
        add_document_window = tk.Toplevel()
        add_document_window.title("Add Document")

        tk.Label(add_document_window, text="Title:").pack(pady=10)
        title_entry = tk.Entry(add_document_window)
        title_entry.pack()

        tk.Label(add_document_window, text="Type:").pack(pady=10)
        type_entry = tk.Entry(add_document_window)
        type_entry.pack()

        tk.Label(add_document_window, text="Notes:").pack(pady=10)
        notes_entry = tk.Entry(add_document_window)
        notes_entry.pack()

        def save_document():
            if 'documents' not in profile:
                profile['documents'] = []
            new_document = {
                'title': title_entry.get(),
                'type': type_entry.get(),
                'notes': notes_entry.get()
            }
            profile['documents'].append(new_document)
            save_to_json(profiles, PROFILES_FILE)
            print_documents()
            update_documents_label(profile)
            add_document_window.destroy()

        tk.Button(add_document_window, text="Save Document", command=save_document).pack(pady=10)

    tk.Button(documents_window, text="Add Document", command=add_document).pack(pady=10)
    print_documents()

# Function to open the create profile window
def create_profile_window():
    create_window = tk.Toplevel()
    create_window.title("Create Profile")

    tk.Label(create_window, text="Enter Profile Name:").pack(pady=10)
    profile_name_entry = tk.Entry(create_window)
    profile_name_entry.pack()

    def save_profile():
        profile_name = profile_name_entry.get().strip()
        if not profile_name:
            messagebox.showwarning("Invalid Input", "Profile name cannot be empty.")
            return
        if any(p['name'] == profile_name for p in profiles):
            messagebox.showwarning("Duplicate Profile", f"A profile with the name '{profile_name}' already exists.")
            return
        new_profile = {'name': profile_name, 'banking_info': {}, 'credit_debts': [], 'vehicles': [], 'contacts': [], 'documents': []}
        profiles.append(new_profile)
        profiles_listbox.insert(tk.END, profile_name)
        save_to_json(profiles, PROFILES_FILE)
        create_window.destroy()

    tk.Button(create_window, text="Save Profile", command=save_profile).pack(pady=10)

# Function to open the banking info window
def open_banking_info_window(profile_name):
    profile = next((p for p in profiles if p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    banking_info = profile.get('banking_info', {})
    if banking_info is None:
        banking_info = {}
        profile['banking_info'] = banking_info

    banking_info_window = tk.Toplevel()
    banking_info_window.title(f"Banking Info for {profile_name}")

    tk.Label(banking_info_window, text="Bank Name:").pack(pady=10)
    bank_name_entry = tk.Entry(banking_info_window)
    bank_name_entry.pack()
    bank_name_entry.insert(0, banking_info.get('bank_name', ''))

    tk.Label(banking_info_window, text="Bank Location:").pack(pady=10)
    bank_location_entry = tk.Entry(banking_info_window)
    bank_location_entry.pack()
    bank_location_entry.insert(0, banking_info.get('bank_location', ''))

    tk.Label(banking_info_window, text="Accounts (separate by commas):").pack(pady=10)
    accounts_entry = tk.Entry(banking_info_window)
    accounts_entry.pack()
    accounts_entry.insert(0, ','.join(banking_info.get('accounts', [])))

    tk.Label(banking_info_window, text="Other Important Info:").pack(pady=10)
    other_info_entry = tk.Entry(banking_info_window)
    other_info_entry.pack()
    other_info_entry.insert(0, banking_info.get('other_info', ''))

    def save_banking_info():
        banking_info = {
            'bank_name': bank_name_entry.get(),
            'bank_location': bank_location_entry.get(),
            'accounts': accounts_entry.get().split(","),
            'other_info': other_info_entry.get()
        }
        profile['banking_info'] = banking_info
        save_to_json(profiles, PROFILES_FILE)
        update_banking_info_label(profile)
        banking_info_window.destroy()

    tk.Button(banking_info_window, text="Save Banking Info", command=save_banking_info).pack(pady=10)

# Function to open the contacts window
def open_contacts_window(profile_name):
    profile = next((p for p in profiles if p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    contacts_window = tk.Toplevel()
    contacts_window.title(f"Contacts for Profile: {profile_name}")

    contacts_list = tk.Listbox(contacts_window, width=50, height=20)
    contacts_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(contacts_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    contacts_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=contacts_list.yview)

    def print_contacts():
        contacts_list.delete(0, tk.END)
        for contact in profile.get('contacts', []):
            contact_info = f"Name: {contact['name']}, Phone: {contact.get('phone', 'N/A')}, Email: {contact.get('email', 'N/A')}"
            contacts_list.insert(tk.END, contact_info)

    def add_contact():
        add_contact_window = tk.Toplevel()
        add_contact_window.title("Add Contact")

        tk.Label(add_contact_window, text="Name:").pack(pady=10)
        name_entry = tk.Entry(add_contact_window)
        name_entry.pack()

        tk.Label(add_contact_window, text="Phone:").pack(pady=10)
        phone_entry = tk.Entry(add_contact_window)
        phone_entry.pack()

        tk.Label(add_contact_window, text="Email:").pack(pady=10)
        email_entry = tk.Entry(add_contact_window)
        email_entry.pack()

        def save_contact():
            if 'contacts' not in profile:
                profile['contacts'] = []
            new_contact = {
                'name': name_entry.get(),
                'phone': phone_entry.get(),
                'email': email_entry.get()
            }
            profile['contacts'].append(new_contact)
            save_to_json(profiles, PROFILES_FILE)
            print_contacts()
            update_contacts_label(profile)
            add_contact_window.destroy()

        tk.Button(add_contact_window, text="Save Contact", command=save_contact).pack(pady=10)

    def edit_contact(event):
        selection = contacts_list.curselection()
        if selection:
            index = selection[0]
            contact = profile.get('contacts', [])[index]
            edit_contact_window(contact, index)

    def edit_contact_window(contact, index):
        edit_contact_win = tk.Toplevel()
        edit_contact_win.title("Edit Contact")

        tk.Label(edit_contact_win, text="Name:").pack(pady=10)
        name_entry = tk.Entry(edit_contact_win)
        name_entry.pack()
        name_entry.insert(0, contact.get('name', ''))

        tk.Label(edit_contact_win, text="Phone:").pack(pady=10)
        phone_entry = tk.Entry(edit_contact_win)
        phone_entry.pack()
        phone_entry.insert(0, contact.get('phone', ''))

        tk.Label(edit_contact_win, text="Email:").pack(pady=10)
        email_entry = tk.Entry(edit_contact_win)
        email_entry.pack()
        email_entry.insert(0, contact.get('email', ''))

        def save_edited_contact():
            updated_contact = {
                'name': name_entry.get(),
                'phone': phone_entry.get(),
                'email': email_entry.get()
            }
            profile['contacts'][index] = updated_contact
            save_to_json(profiles, PROFILES_FILE)
            print_contacts()
            update_contacts_label(profile)
            edit_contact_win.destroy()

        tk.Button(edit_contact_win, text="Save Changes", command=save_edited_contact).pack(pady=10)

    contacts_list.bind('<Double-1>', edit_contact)
    tk.Button(contacts_window, text="Add Contact", command=add_contact).pack(pady=10)
    print_contacts()

# Function to open the housing window
def open_housing_window(profile_name):
    profile = next((p for p in profiles if p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    housing_window = tk.Toplevel()
    housing_window.title(f"Housing for Profile: {profile_name}")

    tk.Label(housing_window, text="Address:").pack(pady=10)
    address_entry = tk.Entry(housing_window)
    address_entry.pack()
    address_entry.insert(0, profile.get('housing', {}).get('address', ''))

    tk.Label(housing_window, text="Mortgages (separate by commas):").pack(pady=10)
    mortgages_entry = tk.Entry(housing_window)
    mortgages_entry.pack()
    mortgages_entry.insert(0, ','.join(profile.get('housing', {}).get('mortgages', [])))

    tk.Label(housing_window, text="Other Details:").pack(pady=10)
    other_entry = tk.Entry(housing_window)
    other_entry.pack()
    other_entry.insert(0, profile.get('housing', {}).get('other', ''))

    def save_housing_info():
        housing_info = {
            'address': address_entry.get(),
            'mortgages': mortgages_entry.get().split(","),
            'other': other_entry.get()
        }
        profile['housing'] = housing_info
        save_to_json(profiles, PROFILES_FILE)
        update_housing_label(profile)
        housing_window.destroy()

    tk.Button(housing_window, text="Save Housing Info", command=save_housing_info).pack(pady=10)

# Function to open the vehicles window
def open_vehicles_window(profile_name):
    profile = next((p for p in profiles if p['name'] == profile_name), None)
    if not profile:
        messagebox.showwarning("Profile Not Found", f"Profile '{profile_name}' not found.")
        return

    vehicles_window = tk.Toplevel()
    vehicles_window.title(f"Vehicles for Profile: {profile_name}")

    vehicles_list = tk.Listbox(vehicles_window, width=50, height=20)
    vehicles_list.pack(side=tk.LEFT, fill=tk.Y)

    scrollbar = tk.Scrollbar(vehicles_window)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    vehicles_list.configure(yscrollcommand=scrollbar.set)
    scrollbar.configure(command=vehicles_list.yview)

    def print_vehicles():
        vehicles_list.delete(0, tk.END)
        for vehicle in profile.get('vehicles', []):
            vehicle_info = f"Model: {vehicle['model']}, Year: {vehicle.get('year', 'N/A')}, Details: {vehicle.get('details', 'N/A')}"
            vehicles_list.insert(tk.END, vehicle_info)

    def add_vehicle():
        add_vehicle_window = tk.Toplevel()
        add_vehicle_window.title("Add Vehicle")

        tk.Label(add_vehicle_window, text="Model:").pack(pady=10)
        model_entry = tk.Entry(add_vehicle_window)
        model_entry.pack()

        tk.Label(add_vehicle_window, text="Year:").pack(pady=10)
        year_entry = tk.Entry(add_vehicle_window)
        year_entry.pack()

        tk.Label(add_vehicle_window, text="Details:").pack(pady=10)
        details_entry = tk.Entry(add_vehicle_window)
        details_entry.pack()

        def save_vehicle():
            if 'vehicles' not in profile:
                profile['vehicles'] = []
            new_vehicle = {
                'model': model_entry.get(),
                'year': year_entry.get(),
                'details': details_entry.get()
            }
            profile['vehicles'].append(new_vehicle)
            save_to_json(profiles, PROFILES_FILE)
            print_vehicles()
            update_vehicles_label(profile)
            add_vehicle_window.destroy()

        tk.Button(add_vehicle_window, text="Save Vehicle", command=save_vehicle).pack(pady=10)

    vehicles_list.bind('<Double-1>', lambda event: edit_vehicle(event, profile, vehicles_list))
    tk.Button(vehicles_window, text="Add Vehicle", command=add_vehicle).pack(pady=10)
    print_vehicles()

def edit_vehicle(event, profile, vehicles_list):
    selection = vehicles_list.curselection()
    if selection:
        index = selection[0]
        vehicle = profile.get('vehicles', [])[index]
        edit_vehicle_window(vehicle, index, profile)

def edit_vehicle_window(vehicle, index, profile):
    edit_vehicle_win = tk.Toplevel()
    edit_vehicle_win.title("Edit Vehicle")

    tk.Label(edit_vehicle_win, text="Model:").pack(pady=10)
    model_entry = tk.Entry(edit_vehicle_win)
    model_entry.pack()
    model_entry.insert(0, vehicle.get('model', ''))

    tk.Label(edit_vehicle_win, text="Year:").pack(pady=10)
    year_entry = tk.Entry(edit_vehicle_win)
    year_entry.pack()
    year_entry.insert(0, vehicle.get('year', ''))

    tk.Label(edit_vehicle_win, text="Details:").pack(pady=10)
    details_entry = tk.Entry(edit_vehicle_win)
    details_entry.pack()
    details_entry.insert(0, vehicle.get('details', ''))

    def save_edited_vehicle():
        updated_vehicle = {
            'model': model_entry.get(),
            'year': year_entry.get(),
            'details': details_entry.get()
        }
        profile['vehicles'][index] = updated_vehicle
        save_to_json(profiles, PROFILES_FILE)
        update_vehicles_label(profile)
        edit_vehicle_win.destroy()

    tk.Button(edit_vehicle_win, text="Save Changes", command=save_edited_vehicle).pack(pady=10)

# Function to open the main menu
def open_main_menu():
    main_window = tk.Tk()
    main_window.title("Main Menu")

    global profiles_listbox
    profiles_listbox = tk.Listbox(main_window, width=50, height=15)
    profiles_listbox.pack(pady=10)
    profiles_listbox.bind('<<ListboxSelect>>', lambda event: profile_selected(profiles_listbox.get(profiles_listbox.curselection())))

    for profile in profiles:
        profiles_listbox.insert(tk.END, profile['name'])

    global banking_info_label
    global credit_debts_label
    global vehicles_label
    global contacts_label
    global documents_label
    global housing_label

    banking_info_label = tk.Label(main_window, text=XMARK)
    banking_info_label.pack()
    credit_debts_label = tk.Label(main_window, text=XMARK)
    credit_debts_label.pack()
    vehicles_label = tk.Label(main_window, text=XMARK)
    vehicles_label.pack()
    contacts_label = tk.Label(main_window, text=XMARK)
    contacts_label.pack()
    documents_label = tk.Label(main_window, text=XMARK)
    documents_label.pack()
    housing_label = tk.Label(main_window, text=XMARK)
    housing_label.pack()

    tk.Button(main_window, text="Create Profile", command=create_profile_window).pack(pady=5)
    tk.Button(main_window, text="Open Contacts", command=lambda: open_contacts_window(profiles_listbox.get(profiles_listbox.curselection()))).pack(pady=5)
    tk.Button(main_window, text="Open Banking Info", command=lambda: open_banking_info_window(profiles_listbox.get(profiles_listbox.curselection()))).pack(pady=5)
    tk.Button(main_window, text="Open Vehicles", command=lambda: open_vehicles_window(profiles_listbox.get(profiles_listbox.curselection()))).pack(pady=5)
    tk.Button(main_window, text="Open Documents", command=lambda: open_documents_window(profiles_listbox.get(profiles_listbox.curselection()))).pack(pady=5)
    tk.Button(main_window, text="Open Housing", command=lambda: open_housing_window(profiles_listbox.get(profiles_listbox.curselection()))).pack(pady=5)

    main_window.mainloop()

def profile_selected(profile_name):
    profile = next((p for p in profiles if p['name'] == profile_name), None)
    if profile:
        update_banking_info_label(profile)
        update_credit_debts_label(profile)
        update_vehicles_label(profile)
        update_contacts_label(profile)
        update_documents_label(profile)
        update_housing_label(profile)

# Run the main menu
open_main_menu()
